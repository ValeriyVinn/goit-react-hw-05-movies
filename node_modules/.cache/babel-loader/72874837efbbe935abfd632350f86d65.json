{"ast":null,"code":"var _jsxFileName = \"E:\\\\\\u041D\\u0410\\u0412\\u0427\\u0410\\u041B\\u041E\\u0427\\u041A\\u0410\\\\HW\\\\REACT\\\\goit-react-hw-05-movies\\\\src\\\\components\\\\Cast\\\\Cast.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieCast, getURL } from 'servises/api';\nimport { toast } from 'react-toastify';\nimport Loader from 'components/Loader/Loader';\nimport PropTypes from 'prop-types';\nimport './Cast.styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Casts = () => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [cast, setCast] = useState(null);\n  const {\n    movieId\n  } = useParams();\n  useEffect(() => {\n    async function fetchCredits() {\n      try {\n        setIsLoading(true);\n        setCast(await getMovieCast(Number(movieId)));\n      } catch (error) {\n        toast.error('we have a problem');\n      } finally {\n        setIsLoading(false);\n      }\n    }\n\n    fetchCredits();\n  }, [movieId]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [isLoading && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        gap: '15px',\n        marginTop: '15px'\n      },\n      children: cast ? cast.map(_ref => {\n        let {\n          original_name,\n          id,\n          profile_path,\n          character\n        } = _ref;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            listStyle: 'none',\n            margin: '0 auto',\n            maxWidth: '250px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: getURL(profile_path),\n            alt: \"poster\",\n            width: '250px'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"actor\",\n            children: original_name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"character\",\n            children: [\"Character:\", character]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 15\n          }, this)]\n        }, id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }, this);\n      }) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"We don`t have any casts here\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Casts, \"lOaU52hngVTA4hNx8wRn1s8k4i4=\", false, function () {\n  return [useParams];\n});\n\n_c = Casts;\nexport default Casts;\n\nvar _c;\n\n$RefreshReg$(_c, \"Casts\");","map":{"version":3,"sources":["E:/НАВЧАЛОЧКА/HW/REACT/goit-react-hw-05-movies/src/components/Cast/Cast.jsx"],"names":["useState","useEffect","useParams","getMovieCast","getURL","toast","Loader","PropTypes","Casts","isLoading","setIsLoading","cast","setCast","movieId","fetchCredits","Number","error","display","flexWrap","gap","marginTop","map","original_name","id","profile_path","character","listStyle","margin","maxWidth"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,YAAT,EAAuBC,MAAvB,QAAqC,cAArC;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAO,mBAAP;;;;AAEA,MAAMC,KAAK,GAAG,MAAM;AAAA;;AAClB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACW,IAAD,EAAOC,OAAP,IAAkBZ,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM;AAAEa,IAAAA;AAAF,MAAcX,SAAS,EAA7B;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAea,YAAf,GAA8B;AAC5B,UAAI;AACFJ,QAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,QAAAA,OAAO,CAAC,MAAMT,YAAY,CAACY,MAAM,CAACF,OAAD,CAAP,CAAnB,CAAP;AACD,OAHD,CAGE,OAAOG,KAAP,EAAc;AACdX,QAAAA,KAAK,CAACW,KAAN,CAAY,mBAAZ;AACD,OALD,SAKU;AACRN,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF;;AACDI,IAAAA,YAAY;AACb,GAZQ,EAYN,CAACD,OAAD,CAZM,CAAT;AAcA,sBACE;AAAA,eACGJ,SAAS,iBAAI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YADhB,eAEE;AACE,MAAA,KAAK,EAAE;AACLQ,QAAAA,OAAO,EAAE,MADJ;AAELC,QAAAA,QAAQ,EAAE,MAFL;AAGLC,QAAAA,GAAG,EAAE,MAHA;AAILC,QAAAA,SAAS,EAAE;AAJN,OADT;AAAA,gBAQGT,IAAI,GACHA,IAAI,CAACU,GAAL,CAAS;AAAA,YAAC;AAAEC,UAAAA,aAAF;AAAiBC,UAAAA,EAAjB;AAAqBC,UAAAA,YAArB;AAAmCC,UAAAA;AAAnC,SAAD;AAAA,4BACP;AAEE,UAAA,KAAK,EAAE;AAAEC,YAAAA,SAAS,EAAE,MAAb;AAAqBC,YAAAA,MAAM,EAAE,QAA7B;AAAuCC,YAAAA,QAAQ,EAAE;AAAjD,WAFT;AAAA,kCAIE;AAAK,YAAA,GAAG,EAAExB,MAAM,CAACoB,YAAD,CAAhB;AAAgC,YAAA,GAAG,EAAC,QAApC;AAA6C,YAAA,KAAK,EAAE;AAApD;AAAA;AAAA;AAAA;AAAA,kBAJF,eAME;AAAG,YAAA,SAAS,EAAC,OAAb;AAAA,sBAAsBF;AAAtB;AAAA;AAAA;AAAA;AAAA,kBANF,eAOE;AAAG,YAAA,SAAS,EAAC,WAAb;AAAA,uBAAyB,YAAzB,EAAoCG,SAApC;AAAA;AAAA;AAAA;AAAA;AAAA,kBAPF;AAAA,WACOF,EADP;AAAA;AAAA;AAAA;AAAA,gBADO;AAAA,OAAT,CADG,gBAaH;AAAA,kBAAG;AAAH;AAAA;AAAA;AAAA;AAAA;AArBJ;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADF;AA6BD,CAhDD;;GAAMf,K;UAGgBN,S;;;KAHhBM,K;AAqDN,eAAeA,KAAf","sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { getMovieCast, getURL } from 'servises/api';\r\nimport { toast } from 'react-toastify';\r\nimport Loader from 'components/Loader/Loader';\r\nimport PropTypes from 'prop-types';\r\nimport './Cast.styles.css';\r\n\r\nconst Casts = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [cast, setCast] = useState(null);\r\n  const { movieId } = useParams();\r\n\r\n  useEffect(() => {\r\n    async function fetchCredits() {\r\n      try {\r\n        setIsLoading(true);\r\n        setCast(await getMovieCast(Number(movieId)));\r\n      } catch (error) {\r\n        toast.error('we have a problem');\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    }\r\n    fetchCredits();\r\n  }, [movieId]);\r\n\r\n  return (\r\n    <>\r\n      {isLoading && <Loader />}\r\n      <div\r\n        style={{\r\n          display: 'flex',\r\n          flexWrap: 'wrap',\r\n          gap: '15px',\r\n          marginTop: '15px',\r\n        }}\r\n      >\r\n        {cast ? (\r\n          cast.map(({ original_name, id, profile_path, character }) => (\r\n            <div\r\n              key={id}\r\n              style={{ listStyle: 'none', margin: '0 auto', maxWidth: '250px' }}\r\n            >\r\n              <img src={getURL(profile_path)} alt=\"poster\" width={'250px'} />\r\n\r\n              <p className=\"actor\">{original_name}</p>\r\n              <p className=\"character\">Character:{character}</p>\r\n            </div>\r\n          ))\r\n        ) : (\r\n          <p>We don`t have any casts here</p>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\n\r\n\r\n\r\nexport default Casts;"]},"metadata":{},"sourceType":"module"}