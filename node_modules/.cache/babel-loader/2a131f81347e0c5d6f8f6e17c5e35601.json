{"ast":null,"code":"/**\n * @remix-run/router v1.7.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n} ////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\n\n\nvar Action;\n\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\n\nconst PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\n\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  let {\n    initialEntries = [\"/\"],\n    initialIndex,\n    v5Compat = false\n  } = options;\n  let entries; // Declare so we can access from createMemoryLocation\n\n  entries = initialEntries.map((entry, index) => createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined));\n  let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  let action = Action.Pop;\n  let listener = null;\n\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n\n  function getCurrentLocation() {\n    return entries[index];\n  }\n\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n\n    let location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n\n  function createHref(to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history = {\n    get index() {\n      return index;\n    },\n\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getCurrentLocation();\n    },\n\n    createHref,\n\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n\n    encodeLocation(to) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 1\n        });\n      }\n    },\n\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 0\n        });\n      }\n    },\n\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n\n      if (listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta\n        });\n      }\n    },\n\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\n\n\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createBrowserLocation(window, globalHistory) {\n    let {\n      pathname,\n      search,\n      hash\n    } = window.location;\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\n\n\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createHashLocation(window, globalHistory) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\"\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createHashHref(window, to) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location, to) {\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\n\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\n\n\nfunction getHistoryState(location, index) {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\n\n\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n\n  let location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\n\n\nfunction createPath(_ref) {\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\"\n  } = _ref;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\n\n\nfunction parsePath(path) {\n  let parsedPath = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nfunction getUrlBasedHistory(getLocation, createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  let {\n    window = document.defaultView,\n    v5Compat = false\n  } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener = null;\n  let index = getIndex(); // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState(_extends({}, globalHistory.state, {\n      idx: index\n    }), \"\");\n  }\n\n  function getIndex() {\n    let state = globalHistory.state || {\n      idx: null\n    };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n\n    if (listener) {\n      listener({\n        action,\n        location: history.location,\n        delta\n      });\n    }\n  }\n\n  function push(to, state) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location); // try...catch because iOS limits us to 100 pushState calls :/\n\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      } // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n\n\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 1\n      });\n    }\n  }\n\n  function replace(to, state) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 0\n      });\n    }\n  }\n\n  function createURL(to) {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base = window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n    let href = typeof to === \"string\" ? to : createPath(to);\n    invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n    return new URL(href, base);\n  }\n\n  let history = {\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n\n    listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n\n    createHref(to) {\n      return createHref(window, to);\n    },\n\n    createURL,\n\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n\n    push,\n    replace,\n\n    go(n) {\n      return globalHistory.go(n);\n    }\n\n  };\n  return history;\n} //#endregion\n\n\nvar ResultType;\n\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\n\nconst immutableRouteKeys = new Set([\"lazy\", \"caseSensitive\", \"path\", \"id\", \"index\", \"children\"]);\n\nfunction isIndexRoute(route) {\n  return route.index === true;\n} // Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\n\n\nfunction convertRoutesToDataRoutes(routes, mapRouteProperties, parentPath, manifest) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n\n  if (manifest === void 0) {\n    manifest = {};\n  }\n\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!manifest[id], \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n\n    if (isIndexRoute(route)) {\n      let indexRoute = _extends({}, route, mapRouteProperties(route), {\n        id\n      });\n\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute = _extends({}, route, mapRouteProperties(route), {\n        id,\n        children: undefined\n      });\n\n      manifest[id] = pathOrLayoutRoute;\n\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(route.children, mapRouteProperties, treePath, manifest);\n      }\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\n\n\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i], // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    safelyDecodeURI(pathname));\n  }\n\n  return matches;\n}\n\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n\n  let flattenRoute = (route, index, relativePath) => {\n    let meta = {\n      relativePath: relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta); // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n\n    if (route.children && route.children.length > 0) {\n      invariant( // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    } // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n\n\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  };\n\n  routes.forEach((route, index) => {\n    var _route$path; // coarse-grain check for optional params\n\n\n    if (route.path === \"\" || !((_route$path = route.path) != null && _route$path.includes(\"?\"))) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n  return branches;\n}\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\n\n\nfunction explodeOptionalSegments(path) {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n  let [first, ...rest] = segments; // Optional path segments are denoted by a trailing `?`\n\n  let isOptional = first.endsWith(\"?\"); // Compute the corresponding required segment: `foo?` -> `foo`\n\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n  let result = []; // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explodes _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n\n  result.push(...restExploded.map(subpath => subpath === \"\" ? required : [required, subpath].join(\"/\"))); // Then if this is an optional value, add all child versions without\n\n  if (isOptional) {\n    result.push(...restExploded);\n  } // for absolute paths, ensure `/` instead of empty segment\n\n\n  return result.map(exploded => path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded);\n}\n\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\n\nconst isSplat = s => s === \"*\";\n\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\n\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ? // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\n\nfunction matchRouteBranch(branch, pathname) {\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    let route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\n\n\nfunction generatePath(originalPath, params) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  let path = originalPath;\n\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(false, \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n    path = path.replace(/\\*$/, \"/*\");\n  } // ensure `/` is added at the beginning if the path is absolute\n\n\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n\n  const stringify = p => p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n\n  const segments = path.split(/\\/+/).map((segment, index, array) => {\n    const isLastSegment = index === array.length - 1; // only apply the splat if it's the last segment\n\n    if (isLastSegment && segment === \"*\") {\n      const star = \"*\"; // Apply the splat\n\n      return stringify(params[star]);\n    }\n\n    const keyMatch = segment.match(/^:(\\w+)(\\??)$/);\n\n    if (keyMatch) {\n      const [, key, optional] = keyMatch;\n      let param = params[key];\n      invariant(optional === \"?\" || param != null, \"Missing \\\":\" + key + \"\\\" param\");\n      return stringify(param);\n    } // Remove any optional markers from optional static segments\n\n\n    return segment.replace(/\\?$/g, \"\");\n  }) // Remove empty segments\n  .filter(segment => !!segment);\n  return prefix + segments.join(\"/\");\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\n\n\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n\n  let [matcher, paramNames] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = paramNames.reduce((memo, paramName, index) => {\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n\n    memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || \"\", paramName);\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\n\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n\n  if (end === void 0) {\n    end = true;\n  }\n\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  let paramNames = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/\\/:(\\w+)/g, (_, paramName) => {\n    paramNames.push(paramName);\n    return \"/([^\\\\/]+)\";\n  });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURI(value) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\n\n\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  } // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n\n\n  let startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\n\n\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\n\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\n\n\nfunction getPathContributingMatches(matches) {\n  return matches.filter((match, index) => index === 0 || match.route.path && match.route.path.length > 0);\n}\n/**\n * @private\n */\n\n\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n\n  let to;\n\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n  let from; // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\"); // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    } // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from); // Ensure the pathname has a trailing slash if the original \"to\" had one\n\n  let hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\"); // Or if this was a link to the current path which has a trailing slash\n\n  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n/**\n * @private\n */\n\n\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\n\n\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n/**\n * @private\n */\n\n\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n/**\n * @private\n */\n\n\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n/**\n * @private\n */\n\n\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\n\n\nconst json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  let headers = new Headers(responseInit.headers);\n\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers\n  }));\n};\n\nclass AbortedDeferredError extends Error {}\n\nclass DeferredData {\n  constructor(data, responseInit) {\n    this.pendingKeysSet = new Set();\n    this.subscribers = new Set();\n    this.deferredKeys = [];\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\"); // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n\n    let reject;\n    this.abortPromise = new Promise((_, r) => reject = r);\n    this.controller = new AbortController();\n\n    let onAbort = () => reject(new AbortedDeferredError(\"Deferred data aborted\"));\n\n    this.unlistenAbortSignal = () => this.controller.signal.removeEventListener(\"abort\", onAbort);\n\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce((acc, _ref) => {\n      let [key, value] = _ref;\n      return Object.assign(acc, {\n        [key]: this.trackPromise(key, value)\n      });\n    }, {});\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  trackPromise(key, value) {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key); // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n\n    let promise = Promise.race([value, this.abortPromise]).then(data => this.onSettle(promise, key, null, data), error => this.onSettle(promise, key, error)); // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n\n    promise.catch(() => {});\n    Object.defineProperty(promise, \"_tracked\", {\n      get: () => true\n    });\n    return promise;\n  }\n\n  onSettle(promise, key, error, data) {\n    if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    if (error) {\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", {\n      get: () => data\n    });\n    this.emit(false, key);\n    return data;\n  }\n\n  emit(aborted, settledKey) {\n    this.subscribers.forEach(subscriber => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal) {\n    let aborted = false;\n\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise(resolve => {\n        this.subscribe(aborted => {\n          signal.removeEventListener(\"abort\", onAbort);\n\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n    return Object.entries(this.data).reduce((acc, _ref2) => {\n      let [key, value] = _ref2;\n      return Object.assign(acc, {\n        [key]: unwrapTrackedPromise(value)\n      });\n    }, {});\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n\n}\n\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\n\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n\n  return value._data;\n}\n\nconst defer = function defer(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  return new DeferredData(data, responseInit);\n};\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\n\n\nconst redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n\n  let responseInit = init;\n\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers\n  }));\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\n\n\nclass ErrorResponse {\n  constructor(status, statusText, data, internal) {\n    if (internal === void 0) {\n      internal = false;\n    }\n\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n\n}\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\n\n\nfunction isRouteErrorResponse(error) {\n  return error != null && typeof error.status === \"number\" && typeof error.statusText === \"string\" && typeof error.internal === \"boolean\" && \"data\" in error;\n}\n\nconst validMutationMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nconst validMutationMethods = new Set(validMutationMethodsArr);\nconst validRequestMethodsArr = [\"get\", ...validMutationMethodsArr];\nconst validRequestMethods = new Set(validRequestMethodsArr);\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\nconst IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst IDLE_BLOCKER = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined\n};\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\nconst defaultMapRouteProperties = route => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary)\n}); //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\n\n\nfunction createRouter(init) {\n  const routerWindow = init.window ? init.window : typeof window !== \"undefined\" ? window : undefined;\n  const isBrowser = typeof routerWindow !== \"undefined\" && typeof routerWindow.document !== \"undefined\" && typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  let mapRouteProperties;\n\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  } // Routes keyed by ID\n\n\n  let manifest = {}; // Routes in tree format for matching\n\n  let dataRoutes = convertRoutesToDataRoutes(init.routes, mapRouteProperties, undefined, manifest);\n  let inFlightDataRoutes;\n  let basename = init.basename || \"/\"; // Config driven behavior flags\n\n  let future = _extends({\n    v7_normalizeFormMethod: false,\n    v7_prependBasename: false\n  }, init.future); // Cleanup function for history\n\n\n  let unlistenHistory = null; // Externally-provided functions to call on all state changes\n\n  let subscribers = new Set(); // Externally-provided object to hold scroll restoration locations during routing\n\n  let savedScrollPositions = null; // Externally-provided function to get scroll restoration keys\n\n  let getScrollRestorationKey = null; // Externally-provided function to get current scroll position\n\n  let getScrollPosition = null; // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n\n  let initialScrollRestored = init.hydrationData != null;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = {\n      [route.id]: error\n    };\n  }\n\n  let initialized = // All initialMatches need to be loaded before we're ready.  If we have lazy\n  // functions around still then we'll need to run them in initialize()\n  !initialMatches.some(m => m.route.lazy) && ( // And we have to either have no loaders or have been provided hydrationData\n  !initialMatches.some(m => m.route.loader) || init.hydrationData != null);\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map()\n  }; // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n\n  let pendingAction = Action.Pop; // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n\n  let pendingPreventScrollReset = false; // AbortController for the active navigation\n\n  let pendingNavigationController; // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n\n  let isUninterruptedRevalidation = false; // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n\n  let isRevalidationRequired = false; // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n\n  let cancelledDeferredRoutes = []; // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n\n  let cancelledFetcherLoads = []; // AbortControllers for any in-flight fetchers\n\n  let fetchControllers = new Map(); // Track loads based on the order in which they started\n\n  let incrementingLoadId = 0; // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n\n  let pendingNavigationLoadId = -1; // Fetchers that triggered data reloads as a result of their actions\n\n  let fetchReloadIds = new Map(); // Fetchers that triggered redirect navigations\n\n  let fetchRedirectIds = new Set(); // Most recent href/match for fetcher.load calls for fetchers\n\n  let fetchLoadMatches = new Map(); // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n\n  let activeDeferreds = new Map(); // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n\n  let blockerFunctions = new Map(); // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n\n  let ignoreNextHistoryUpdate = false; // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(_ref => {\n      let {\n        action: historyAction,\n        location,\n        delta\n      } = _ref; // Ignore this event if it was just us resetting the URL from a\n      // blocked POP navigation\n\n      if (ignoreNextHistoryUpdate) {\n        ignoreNextHistoryUpdate = false;\n        return;\n      }\n\n      warning(blockerFunctions.size === 0 || delta != null, \"You are trying to use a blocker on a POP navigation to a location \" + \"that was not created by @remix-run/router. This will fail silently in \" + \"production. This can happen if you are navigating outside the router \" + \"via `window.history.pushState`/`window.location.hash` instead of using \" + \"router navigation APIs.  This can also happen if you are using \" + \"createHashRouter and the user manually changes the URL.\");\n      let blockerKey = shouldBlockNavigation({\n        currentLocation: state.location,\n        nextLocation: location,\n        historyAction\n      });\n\n      if (blockerKey && delta != null) {\n        // Restore the URL to match the current UI, but don't update router state\n        ignoreNextHistoryUpdate = true;\n        init.history.go(delta * -1); // Put the blocker into a blocked state\n\n        updateBlocker(blockerKey, {\n          state: \"blocked\",\n          location,\n\n          proceed() {\n            updateBlocker(blockerKey, {\n              state: \"proceeding\",\n              proceed: undefined,\n              reset: undefined,\n              location\n            }); // Re-do the same POP navigation we just blocked\n\n            init.history.go(delta);\n          },\n\n          reset() {\n            let blockers = new Map(state.blockers);\n            blockers.set(blockerKey, IDLE_BLOCKER);\n            updateState({\n              blockers\n            });\n          }\n\n        });\n        return;\n      }\n\n      return startNavigation(historyAction, location);\n    }); // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location);\n    }\n\n    return router;\n  } // Clean up a router and it's side effects\n\n\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  } // Subscribe to state updates for the router\n\n\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  } // Update our state and notify the calling context of the change\n\n\n  function updateState(newState) {\n    state = _extends({}, state, newState);\n    subscribers.forEach(subscriber => subscriber(state));\n  } // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n\n\n  function completeNavigation(location, newState) {\n    var _location$state, _location$state2; // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n\n\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === \"loading\" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;\n    let actionData;\n\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    } // Always preserve any existing loaderData from re-used routes\n\n\n    let loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData; // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n\n    let blockers = new Map();\n    blockerFunctions.clear(); // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n\n    let preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;\n\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n\n    if (isUninterruptedRevalidation) ;else if (pendingAction === Action.Pop) ;else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    }\n    updateState(_extends({}, newState, {\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset,\n      blockers\n    })); // Reset stateful navigation vars\n\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  } // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n\n\n  async function navigate(to, opts) {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, to, opts == null ? void 0 : opts.fromRouteId, opts == null ? void 0 : opts.relative);\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, false, normalizedPath, opts);\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state); // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n\n    nextLocation = _extends({}, nextLocation, init.history.encodeLocation(nextLocation));\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n    let historyAction = Action.Push;\n\n    if (userReplace === true) {\n      historyAction = Action.Replace;\n    } else if (userReplace === false) ;else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = Action.Replace;\n    }\n\n    let preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction\n    });\n\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n\n        proceed() {\n          updateBlocker(blockerKey, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation\n          }); // Send the same navigation through\n\n          navigate(to, opts);\n        },\n\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey, IDLE_BLOCKER);\n          updateState({\n            blockers\n          });\n        }\n\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace\n    });\n  } // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n\n\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    }); // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n\n    if (state.navigation.state === \"submitting\") {\n      return;\n    } // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n\n\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    } // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n\n\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  } // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n\n\n  async function startNavigation(historyAction, location, opts) {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true; // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename); // Short circuit with a 404 on the root error boundary if we match nothing\n\n    if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(routesToUse); // Cancel all pending deferred on 404s since we don't keep any routes\n\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error\n        }\n      });\n      return;\n    } // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial load will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n\n\n    if (state.initialized && !isRevalidationRequired && isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {\n      completeNavigation(location, {\n        matches\n      });\n      return;\n    } // Create a controller/Request for this navigation\n\n\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);\n    let pendingActionData;\n    let pendingError;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError\n      };\n    } else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(request, location, opts.submission, matches, {\n        replace: opts.replace\n      });\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n      loadingNavigation = getLoadingNavigation(location, opts.submission); // Create a GET request for the loaders\n\n      request = new Request(request.url, {\n        signal: request.signal\n      });\n    } // Call loaders\n\n\n    let {\n      shortCircuited,\n      loaderData,\n      errors\n    } = await handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.fetcherSubmission, opts && opts.replace, pendingActionData, pendingError);\n\n    if (shortCircuited) {\n      return;\n    } // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n\n\n    pendingNavigationController = null;\n    completeNavigation(location, _extends({\n      matches\n    }, pendingActionData ? {\n      actionData: pendingActionData\n    } : {}, {\n      loaderData,\n      errors\n    }));\n  } // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n\n\n  async function handleAction(request, location, submission, matches, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    interruptActiveLoads(); // Put us in a submitting state\n\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({\n      navigation\n    }); // Call our action and get the result\n\n    let result;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id\n        })\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, manifest, mapRouteProperties, basename);\n\n      if (request.signal.aborted) {\n        return {\n          shortCircuited: true\n        };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace;\n\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace = result.location === state.location.pathname + state.location.search;\n      }\n\n      await startRedirectNavigation(state, result, {\n        submission,\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id); // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n\n      if ((opts && opts.replace) !== true) {\n        pendingAction = Action.Push;\n      }\n\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: {\n          [boundaryMatch.route.id]: result.error\n        }\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n\n    return {\n      pendingActionData: {\n        [actionMatch.route.id]: result.data\n      }\n    };\n  } // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n\n\n  async function handleLoaders(request, location, matches, overrideNavigation, submission, fetcherSubmission, replace, pendingActionData, pendingError) {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation || getLoadingNavigation(location, submission); // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n\n    let activeSubmission = submission || fetcherSubmission || getSubmissionFromNavigation(loadingNavigation);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, activeSubmission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionData, pendingError); // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n\n    cancelActiveDeferreds(routeId => !(matches && matches.some(m => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some(m => m.route.id === routeId)); // Short circuit if we have no loaders to run\n\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(location, _extends({\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null\n      }, pendingActionData ? {\n        actionData: pendingActionData\n      } : {}, updatedFetchers ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n      return {\n        shortCircuited: true\n      };\n    } // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n\n\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(rf => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher = getLoadingFetcher(undefined, fetcher ? fetcher.data : undefined);\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState(_extends({\n        navigation: loadingNavigation\n      }, actionData ? Object.keys(actionData).length === 0 ? {\n        actionData: null\n      } : {\n        actionData\n      } : {}, revalidatingFetchers.length > 0 ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach(rf => {\n      if (fetchControllers.has(rf.key)) {\n        abortFetcher(rf.key);\n      }\n\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    }); // Proxy navigation abort through to revalidation fetchers\n\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(f => abortFetcher(f.key));\n\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);\n\n    if (request.signal.aborted) {\n      return {\n        shortCircuited: true\n      };\n    } // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n\n\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n\n    revalidatingFetchers.forEach(rf => fetchControllers.delete(rf.key)); // If any loaders returned a redirect Response, start a new REPLACE navigation\n\n    let redirect = findRedirect(results);\n\n    if (redirect) {\n      await startRedirectNavigation(state, redirect, {\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    } // Process and commit output from loaders\n\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds); // Wire up subscribers to update loaderData as promises settle\n\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe(aborted => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers = updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n    return _extends({\n      loaderData,\n      errors\n    }, shouldUpdateFetchers ? {\n      fetchers: new Map(state.fetchers)\n    } : {});\n  }\n\n  function getFetcher(key) {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  } // Trigger a fetcher load/submit for the given fetcher key\n\n\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, href, routeId, opts == null ? void 0 : opts.relative);\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: normalizedPath\n      }));\n      return;\n    }\n\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, true, normalizedPath, opts);\n\n    if (error) {\n      setFetcherError(key, routeId, error);\n      return;\n    }\n\n    let match = getTargetMatch(matches, path);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    } // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n\n\n    fetchLoadMatches.set(key, {\n      routeId,\n      path\n    });\n    handleFetcherLoader(key, routeId, path, match, matches, submission);\n  } // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n\n\n  async function handleFetcherAction(key, routeId, path, match, requestMatches, submission) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action && !match.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId\n      });\n      setFetcherError(key, routeId, error);\n      return;\n    } // Put this fetcher into it's submitting state\n\n\n    let existingFetcher = state.fetchers.get(key);\n    let fetcher = getSubmittingFetcher(submission, existingFetcher);\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }); // Call the action for the fetcher\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);\n    fetchControllers.set(key, abortController);\n    let actionResult = await callLoaderOrAction(\"action\", fetchRequest, match, requestMatches, manifest, mapRouteProperties, basename);\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n      let loadingFetcher = getLoadingFetcher(submission);\n      state.fetchers.set(key, loadingFetcher);\n      updateState({\n        fetchers: new Map(state.fetchers)\n      });\n      return startRedirectNavigation(state, actionResult, {\n        submission,\n        isFetchActionRedirect: true\n      });\n    } // Process any non-redirect errors thrown\n\n\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    } // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n\n\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches = state.navigation.state !== \"idle\" ? matchRoutes(routesToUse, state.navigation.location, basename) : state.matches;\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, submission, nextLocation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, {\n      [match.route.id]: actionResult.data\n    }, undefined // No need to send through errors since we short circuit above\n    ); // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n\n    revalidatingFetchers.filter(rf => rf.key !== key).forEach(rf => {\n      let staleKey = rf.key;\n      let existingFetcher = state.fetchers.get(staleKey);\n      let revalidatingFetcher = getLoadingFetcher(undefined, existingFetcher ? existingFetcher.data : undefined);\n      state.fetchers.set(staleKey, revalidatingFetcher);\n\n      if (fetchControllers.has(staleKey)) {\n        abortFetcher(staleKey);\n      }\n\n      if (rf.controller) {\n        fetchControllers.set(staleKey, rf.controller);\n      }\n    });\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(rf => abortFetcher(rf.key));\n\n    abortController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    abortController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(r => fetchControllers.delete(r.key));\n    let redirect = findRedirect(results);\n\n    if (redirect) {\n      return startRedirectNavigation(state, redirect);\n    } // Process and commit output from loaders\n\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds); // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId); // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n\n    if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers)\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState(_extends({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors)\n      }, didAbortFetchLoads || revalidatingFetchers.length > 0 ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n      isRevalidationRequired = false;\n    }\n  } // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n\n\n  async function handleFetcherLoader(key, routeId, path, match, matches, submission) {\n    let existingFetcher = state.fetchers.get(key); // Put this fetcher into it's loading state\n\n    let loadingFetcher = getLoadingFetcher(submission, existingFetcher ? existingFetcher.data : undefined);\n    state.fetchers.set(key, loadingFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }); // Call the loader for this fetcher route match\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let result = await callLoaderOrAction(\"loader\", fetchRequest, match, matches, manifest, mapRouteProperties, basename); // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n\n    if (isDeferredResult(result)) {\n      result = (await resolveDeferredData(result, fetchRequest.signal, true)) || result;\n    } // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n\n\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    } // If the loader threw a redirect Response, start a new REPLACE navigation\n\n\n    if (isRedirectResult(result)) {\n      fetchRedirectIds.add(key);\n      await startRedirectNavigation(state, result);\n      return;\n    } // Process any non-redirect errors thrown\n\n\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key); // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error\n        }\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\"); // Put the fetcher back into an idle state\n\n    let doneFetcher = getDoneFetcher(result.data);\n    state.fetchers.set(key, doneFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n\n\n  async function startRedirectNavigation(state, redirect, _temp) {\n    let {\n      submission,\n      replace,\n      isFetchActionRedirect\n    } = _temp === void 0 ? {} : _temp;\n\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    let redirectLocation = createLocation(state.location, redirect.location, // TODO: This can be removed once we get rid of useTransition in Remix v2\n    _extends({\n      _isRedirect: true\n    }, isFetchActionRedirect ? {\n      _isFetchActionRedirect: true\n    } : {}));\n    invariant(redirectLocation, \"Expected a location on the redirect navigation\"); // Check if this an absolute external redirect that goes to a new origin\n\n    if (ABSOLUTE_URL_REGEX.test(redirect.location) && isBrowser) {\n      let url = init.history.createURL(redirect.location);\n      let isDifferentBasename = stripBasename(url.pathname, basename) == null;\n\n      if (routerWindow.location.origin !== url.origin || isDifferentBasename) {\n        if (replace) {\n          routerWindow.location.replace(redirect.location);\n        } else {\n          routerWindow.location.assign(redirect.location);\n        }\n\n        return;\n      }\n    } // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n\n\n    pendingNavigationController = null;\n    let redirectHistoryAction = replace === true ? Action.Replace : Action.Push; // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n\n    let activeSubmission = submission || getSubmissionFromNavigation(state.navigation); // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n\n    if (redirectPreserveMethodStatusCodes.has(redirect.status) && activeSubmission && isMutationMethod(activeSubmission.formMethod)) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: _extends({}, activeSubmission, {\n          formAction: redirect.location\n        }),\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    } else if (isFetchActionRedirect) {\n      // For a fetch action redirect, we kick off a new loading navigation\n      // without the fetcher submission, but we send it along for shouldRevalidate\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: getLoadingNavigation(redirectLocation),\n        fetcherSubmission: activeSubmission,\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    } else {\n      // If we have a submission, we will preserve it through the redirect navigation\n      let overrideNavigation = getLoadingNavigation(redirectLocation, activeSubmission);\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, manifest, mapRouteProperties, basename)), ...fetchersToLoad.map(f => {\n      if (f.matches && f.match && f.controller) {\n        return callLoaderOrAction(\"loader\", createClientSideRequest(init.history, f.path, f.controller.signal), f.match, f.matches, manifest, mapRouteProperties, basename);\n      } else {\n        let error = {\n          type: ResultType.error,\n          error: getInternalRouterError(404, {\n            pathname: f.path\n          })\n        };\n        return error;\n      }\n    })]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n    await Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, loaderResults.map(() => request.signal), false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(f => f.match), fetcherResults, fetchersToLoad.map(f => f.controller ? f.controller.signal : null), true)]);\n    return {\n      results,\n      loaderResults,\n      fetcherResults\n    };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true; // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds()); // Abort in-flight fetcher loads\n\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key, routeId, error) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error\n      },\n      fetchers: new Map(state.fetchers)\n    });\n  }\n\n  function deleteFetcher(key) {\n    let fetcher = state.fetchers.get(key); // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n\n    if (fetchControllers.has(key) && !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))) {\n      abortFetcher(key);\n    }\n\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n    let updatedFetchers = false;\n\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, \"Expected fetcher: \" + key);\n\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key, fn) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  } // Utility function to update blockers, ensuring valid state transitions\n\n\n  function updateBlocker(key, newBlocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER; // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n\n    invariant(blocker.state === \"unblocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"proceeding\" || blocker.state === \"blocked\" && newBlocker.state === \"unblocked\" || blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\", \"Invalid blocker state transition: \" + blocker.state + \" -> \" + newBlocker.state);\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({\n      blockers\n    });\n  }\n\n  function shouldBlockNavigation(_ref2) {\n    let {\n      currentLocation,\n      nextLocation,\n      historyAction\n    } = _ref2;\n\n    if (blockerFunctions.size === 0) {\n      return;\n    } // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n\n\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    } // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n\n\n    if (blockerFunction({\n      currentLocation,\n      nextLocation,\n      historyAction\n    })) {\n      return blockerKey;\n    }\n  }\n\n  function cancelActiveDeferreds(predicate) {\n    let cancelledRouteIds = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  } // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n\n\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null; // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function getScrollKey(location, matches) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(location, matches.map(m => createUseMatchesMatch(m, state.loaderData)));\n      return key || location.key;\n    }\n\n    return location.key;\n  }\n\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n\n    return null;\n  }\n\n  function _internalSetRoutes(newRoutes) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(newRoutes, mapRouteProperties, undefined, manifest);\n  }\n\n  router = {\n    get basename() {\n      return basename;\n    },\n\n    get state() {\n      return state;\n    },\n\n    get routes() {\n      return dataRoutes;\n    },\n\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: to => init.history.createHref(to),\n    encodeLocation: to => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes\n  };\n  return router;\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\n\nconst UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\nfunction createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to createStaticHandler\");\n  let manifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties;\n\n  if (opts != null && opts.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts != null && opts.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n\n  let dataRoutes = convertRoutesToDataRoutes(routes, mapRouteProperties, undefined, manifest);\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n\n  async function query(request, _temp2) {\n    let {\n      requestContext\n    } = _temp2 === void 0 ? {} : _temp2;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, {\n        method\n      });\n      let {\n        matches: methodNotAllowedMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext);\n\n    if (isResponse(result)) {\n      return result;\n    } // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n\n\n    return _extends({\n      location,\n      basename\n    }, result);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n\n\n  async function queryRoute(request, _temp3) {\n    let {\n      routeId,\n      requestContext\n    } = _temp3 === void 0 ? {} : _temp3;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, {\n        method\n      });\n    } else if (!matches) {\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n\n    let match = routeId ? matches.find(m => m.route.id === routeId) : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext, match);\n\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    } // Pick off the right state value to return\n\n\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      var _result$activeDeferre;\n\n      let data = Object.values(result.loaderData)[0];\n\n      if ((_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(request, location, matches, requestContext, routeMatch) {\n    invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, routeMatch != null);\n        return result;\n      }\n\n      let result = await loadRouteData(request, matches, requestContext, routeMatch);\n      return isResponse(result) ? result : _extends({}, result, {\n        actionData: null,\n        actionHeaders: {}\n      });\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error && !isRedirectResponse(e.response)) {\n          throw e.response;\n        }\n\n        return e.response;\n      } // Redirects are always returned since they don't propagate to catch\n      // boundaries\n\n\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n\n      throw e;\n    }\n  }\n\n  async function submit(request, matches, actionMatch, requestContext, isRouteRequest) {\n    let result;\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id\n      });\n\n      if (isRouteRequest) {\n        throw error;\n      }\n\n      result = {\n        type: ResultType.error,\n        error\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, manifest, mapRouteProperties, basename, {\n        isStaticRequest: true,\n        isRouteRequest,\n        requestContext\n      });\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(method + \"() call aborted\");\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location\n        }\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n\n      if (isRouteRequest) {\n        throw error;\n      }\n\n      result = {\n        type: ResultType.error,\n        error\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: {\n          [actionMatch.route.id]: result.data\n        },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(request, matches, requestContext, undefined, {\n        [boundaryMatch.route.id]: result.error\n      }); // action status codes take precedence over loader status codes\n\n      return _extends({}, context, {\n        statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,\n        actionData: null,\n        actionHeaders: _extends({}, result.headers ? {\n          [actionMatch.route.id]: result.headers\n        } : {})\n      });\n    } // Create a GET request for the loaders\n\n\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n    return _extends({}, context, result.statusCode ? {\n      statusCode: result.statusCode\n    } : {}, {\n      actionData: {\n        [actionMatch.route.id]: result.data\n      },\n      actionHeaders: _extends({}, result.headers ? {\n        [actionMatch.route.id]: result.headers\n      } : {})\n    });\n  }\n\n  async function loadRouteData(request, matches, requestContext, routeMatch, pendingActionError) {\n    let isRouteRequest = routeMatch != null; // Short circuit if we have no loaders to run (queryRoute())\n\n    if (isRouteRequest && !(routeMatch != null && routeMatch.route.loader) && !(routeMatch != null && routeMatch.route.lazy)) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch == null ? void 0 : routeMatch.route.id\n      });\n    }\n\n    let requestMatches = routeMatch ? [routeMatch] : getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]);\n    let matchesToLoad = requestMatches.filter(m => m.route.loader || m.route.lazy); // Short circuit if we have no loaders to run (query())\n\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce((acc, m) => Object.assign(acc, {\n          [m.route.id]: null\n        }), {}),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null\n      };\n    }\n\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, manifest, mapRouteProperties, basename, {\n      isStaticRequest: true,\n      isRouteRequest,\n      requestContext\n    }))]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(method + \"() call aborted\");\n    } // Process and commit output from loaders\n\n\n    let activeDeferreds = new Map();\n    let context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError, activeDeferreds); // Add a null for any non-loader matches for proper revalidation on the client\n\n    let executedLoaders = new Set(matchesToLoad.map(match => match.route.id));\n    matches.forEach(match => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n    return _extends({}, context, {\n      matches,\n      activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null\n    });\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute\n  };\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\n\n\nfunction getStaticContextFromError(routes, context, error) {\n  let newContext = _extends({}, context, {\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error\n    }\n  });\n\n  return newContext;\n}\n\nfunction isSubmissionNavigation(opts) {\n  return opts != null && (\"formData\" in opts && opts.formData != null || \"body\" in opts && opts.body !== undefined);\n}\n\nfunction normalizeTo(location, matches, basename, prependBasename, to, fromRouteId, relative) {\n  let contextualMatches;\n  let activeRouteMatch;\n\n  if (fromRouteId != null && relative !== \"path\") {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route.  When using relative:path,\n    // fromRouteId is ignored since that is always relative to the current\n    // location path\n    contextualMatches = [];\n\n    for (let match of matches) {\n      contextualMatches.push(match);\n\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  } // Resolve the relative path\n\n\n  let path = resolveTo(to ? to : \".\", getPathContributingMatches(contextualMatches).map(m => m.pathnameBase), stripBasename(location.pathname, basename) || location.pathname, relative === \"path\"); // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  } // Add an ?index param for matched index routes if we don't already have one\n\n\n  if ((to == null || to === \"\" || to === \".\") && activeRouteMatch && activeRouteMatch.route.index && !hasNakedIndexQuery(path.search)) {\n    path.search = path.search ? path.search.replace(/^\\?/, \"?index&\") : \"?index\";\n  } // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n\n\n  if (prependBasename && basename !== \"/\") {\n    path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n} // Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\n\n\nfunction normalizeNavigateOptions(normalizeFormMethod, isFetcher, path, opts) {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path\n    };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  }\n\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, {\n      type: \"invalid-body\"\n    })\n  }); // Create a Submission on non-GET navigations\n\n\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = normalizeFormMethod ? rawFormMethod.toUpperCase() : rawFormMethod.toLowerCase();\n  let formAction = stripHashFromPath(path);\n\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      let text = typeof opts.body === \"string\" ? opts.body : opts.body instanceof FormData || opts.body instanceof URLSearchParams ? // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n      Array.from(opts.body.entries()).reduce((acc, _ref3) => {\n        let [name, value] = _ref3;\n        return \"\" + acc + name + \"=\" + value + \"\\n\";\n      }, \"\") : String(opts.body);\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text\n        }\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      try {\n        let json = typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined\n          }\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n\n  invariant(typeof FormData === \"function\", \"FormData is not available in this environment\");\n  let searchParams;\n  let formData;\n\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n\n  let submission = {\n    formMethod,\n    formAction,\n    formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n    formData,\n    json: undefined,\n    text: undefined\n  };\n\n  if (isMutationMethod(submission.formMethod)) {\n    return {\n      path,\n      submission\n    };\n  } // Flatten submission onto URLSearchParams for GET submissions\n\n\n  let parsedPath = parsePath(path); // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n\n  parsedPath.search = \"?\" + searchParams;\n  return {\n    path: createPath(parsedPath),\n    submission\n  };\n} // Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\n\n\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  let boundaryMatches = matches;\n\n  if (boundaryId) {\n    let index = matches.findIndex(m => m.route.id === boundaryId);\n\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(history, state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionData, pendingError) {\n  let actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location); // Pick navigation matches that are net-new or qualify for revalidation\n\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    if (match.route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n\n    if (match.route.loader == null) {\n      return false;\n    } // Always call the loader on new route instances and pending defer cancellations\n\n\n    if (isNewLoader(state.loaderData, state.matches[index], match) || cancelledDeferredRoutes.some(id => id === match.route.id)) {\n      return true;\n    } // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n\n\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n    return shouldRevalidateLoader(match, _extends({\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params\n    }, submission, {\n      actionResult,\n      defaultShouldRevalidate: // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n      isRevalidationRequired || // Clicked the same link, resubmitted a GET form\n      currentUrl.pathname + currentUrl.search === nextUrl.pathname + nextUrl.search || // Search params affect all loaders\n      currentUrl.search !== nextUrl.search || isNewRouteInstance(currentRouteMatch, nextRouteMatch)\n    }));\n  }); // Pick fetcher.loads that need to be revalidated\n\n  let revalidatingFetchers = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate if fetcher won't be present in the subsequent render\n    if (!matches.some(m => m.route.id === f.routeId)) {\n      return;\n    }\n\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename); // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData\n\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null\n      });\n      return;\n    } // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They only set `defaultShouldRevalidate` on\n    // explicit revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n    //\n    // They automatically revalidate without even calling shouldRevalidate if:\n    // - They were cancelled\n    // - They're in the middle of their first load and therefore this is still\n    //   an initial load and not a revalidation\n    //\n    // If neither of those is true, then they _always_ check shouldRevalidate\n\n\n    let fetcher = state.fetchers.get(key);\n    let isPerformingInitialLoad = fetcher && fetcher.state !== \"idle\" && fetcher.data === undefined && // If a fetcher.load redirected then it'll be \"loading\" without any data\n    // so ensure we're not processing the redirect from this fetcher\n    !fetchRedirectIds.has(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n    let shouldRevalidate = cancelledFetcherLoads.includes(key) || isPerformingInitialLoad || shouldRevalidateLoader(fetcherMatch, _extends({\n      currentUrl,\n      currentParams: state.matches[state.matches.length - 1].params,\n      nextUrl,\n      nextParams: matches[matches.length - 1].params\n    }, submission, {\n      actionResult,\n      defaultShouldRevalidate: isRevalidationRequired\n    }));\n\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController()\n      });\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew = // [a] -> [a, b]\n  !currentMatch || // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id; // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n\n  let isMissingData = currentLoaderData[match.route.id] === undefined; // Always load if this is a net-new route or we don't yet have data\n\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(currentMatch, match) {\n  let currentPath = currentMatch.route.path;\n  return (// param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname || // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath != null && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\n\nfunction shouldRevalidateLoader(loaderMatch, arg) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\n\n\nasync function loadLazyRouteModule(route, mapRouteProperties, manifest) {\n  if (!route.lazy) {\n    return;\n  }\n\n  let lazyRoute = await route.lazy(); // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n\n  if (!route.lazy) {\n    return;\n  }\n\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\"); // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n\n  let routeUpdates = {};\n\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue = routeToUpdate[lazyRouteProperty];\n    let isPropertyStaticallyDefined = staticRouteValue !== undefined && // This property isn't static since it should always be updated based\n    // on the route updates\n    lazyRouteProperty !== \"hasErrorBoundary\";\n    warning(!isPropertyStaticallyDefined, \"Route \\\"\" + routeToUpdate.id + \"\\\" has a static property \\\"\" + lazyRouteProperty + \"\\\" \" + \"defined but its lazy function is also returning a value for this property. \" + (\"The lazy route property \\\"\" + lazyRouteProperty + \"\\\" will be ignored.\"));\n\n    if (!isPropertyStaticallyDefined && !immutableRouteKeys.has(lazyRouteProperty)) {\n      routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty];\n    }\n  } // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n\n\n  Object.assign(routeToUpdate, routeUpdates); // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n\n  Object.assign(routeToUpdate, _extends({}, mapRouteProperties(routeToUpdate), {\n    lazy: undefined\n  }));\n}\n\nasync function callLoaderOrAction(type, request, match, matches, manifest, mapRouteProperties, basename, opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n\n  let resultType;\n  let result;\n  let onReject;\n\n  let runHandler = handler => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject;\n    let abortPromise = new Promise((_, r) => reject = r);\n\n    onReject = () => reject();\n\n    request.signal.addEventListener(\"abort\", onReject);\n    return Promise.race([handler({\n      request,\n      params: match.params,\n      context: opts.requestContext\n    }), abortPromise]);\n  };\n\n  try {\n    let handler = match.route[type];\n\n    if (match.route.lazy) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let values = await Promise.all([runHandler(handler), loadLazyRouteModule(match.route, mapRouteProperties, manifest)]);\n        result = values[0];\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadLazyRouteModule(match.route, mapRouteProperties, manifest);\n        handler = match.route[type];\n\n        if (handler) {\n          // Handler still run even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return {\n            type: ResultType.data,\n            data: undefined\n          };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n\n    invariant(result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n\n  if (isResponse(result)) {\n    let status = result.status; // Process redirects\n\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\"); // Support relative routing in internal redirects\n\n      if (!ABSOLUTE_URL_REGEX.test(location)) {\n        location = normalizeTo(new URL(request.url), matches.slice(0, matches.indexOf(match) + 1), basename, true, location);\n      } else if (!opts.isStaticRequest) {\n        // Strip off the protocol+origin for same-origin + same-basename absolute\n        // redirects. If this is a static request, we can let it go back to the\n        // browser as-is\n        let currentUrl = new URL(request.url);\n        let url = location.startsWith(\"//\") ? new URL(currentUrl.protocol + location) : new URL(location);\n        let isSameBasename = stripBasename(url.pathname, basename) != null;\n\n        if (url.origin === currentUrl.origin && isSameBasename) {\n          location = url.pathname + url.search + url.hash;\n        }\n      } // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n\n\n      if (opts.isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null\n      };\n    } // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n\n\n    if (opts.isRouteRequest) {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        type: resultType || ResultType.data,\n        response: result\n      };\n    }\n\n    let data;\n    let contentType = result.headers.get(\"Content-Type\"); // Check between word boundaries instead of startsWith() due to the last\n    // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n\n    if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return {\n      type: resultType,\n      error: result\n    };\n  }\n\n  if (isDeferredData(result)) {\n    var _result$init, _result$init2;\n\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status,\n      headers: ((_result$init2 = result.init) == null ? void 0 : _result$init2.headers) && new Headers(result.init.headers)\n    };\n  }\n\n  return {\n    type: ResultType.data,\n    data: result\n  };\n} // Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\n\n\nfunction createClientSideRequest(history, location, signal, submission) {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init = {\n    signal\n  };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let {\n      formMethod,\n      formEncType\n    } = submission; // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n\n    init.method = formMethod.toUpperCase();\n\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({\n        \"Content-Type\": formEncType\n      });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (formEncType === \"application/x-www-form-urlencoded\" && submission.formData) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData) {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n\n  return searchParams;\n}\n\nfunction convertSearchParamsToFormData(searchParams) {\n  let formData = new FormData();\n\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n\n  return formData;\n}\n\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {\n  // Fill in loaderData/errors from our loaders\n  let loaderData = {};\n  let errors = null;\n  let statusCode;\n  let foundError = false;\n  let loaderHeaders = {}; // Process loader results into state.loaderData/state.errors\n\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error; // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = errors || {}; // Prefer higher error values if lower errors bubble to the same boundary\n\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      } // Clear our any prior loaderData for the throwing route\n\n\n      loaderData[id] = undefined; // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      } // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n\n\n      if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  }); // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders\n  };\n}\n\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  let {\n    loaderData,\n    errors\n  } = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds); // Process results from our revalidating fetchers\n\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let {\n      key,\n      match,\n      controller\n    } = revalidatingFetchers[index];\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    let result = fetcherResults[index]; // Process fetcher non-redirect errors\n\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      continue;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match == null ? void 0 : match.route.id);\n\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, {\n          [boundaryMatch.route.id]: result.error\n        });\n      }\n\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return {\n    loaderData,\n    errors\n  };\n}\n\nfunction mergeLoaderData(loaderData, newLoaderData, matches, errors) {\n  let mergedLoaderData = _extends({}, newLoaderData);\n\n  for (let match of matches) {\n    let id = match.route.id;\n\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n\n  return mergedLoaderData;\n} // Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\n\n\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find(m => m.route.hasErrorBoundary === true) || matches[0];\n}\n\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find(r => r.index || !r.path || r.path === \"/\") || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route\n    }],\n    route\n  };\n}\n\nfunction getInternalRouterError(status, _temp4) {\n  let {\n    pathname,\n    routeId,\n    method,\n    type\n  } = _temp4 === void 0 ? {} : _temp4;\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n\n  return new ErrorResponse(status || 500, statusText, new Error(errorMessage), true);\n} // Find any returned redirect errors, starting from the lowest match\n\n\nfunction findRedirect(results) {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\nfunction stripHashFromPath(path) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\n\nfunction isHashChangeOnly(a, b) {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  } // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n\n\n  return false;\n}\n\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\n\nfunction isDeferredData(value) {\n  let deferred = value;\n  return deferred && typeof deferred === \"object\" && typeof deferred.data === \"object\" && typeof deferred.subscribe === \"function\" && typeof deferred.cancel === \"function\" && typeof deferred.resolveData === \"function\";\n}\n\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\n\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj) {\n  return obj && isResponse(obj.response) && (obj.type === ResultType.data || ResultType.error);\n}\n\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method.toLowerCase());\n}\n\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method.toLowerCase());\n}\n\nasync function resolveDeferredResults(currentMatches, matchesToLoad, results, signals, isFetcher, currentLoaderData) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index]; // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n\n    if (!match) {\n      continue;\n    }\n\n    let currentMatch = currentMatches.find(m => m.route.id === match.route.id);\n    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      let signal = signals[index];\n      invariant(signal, \"Expected an AbortSignal for revalidating fetcher deferred result\");\n      await resolveDeferredData(result, signal, isFetcher).then(result => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(result, signal, unwrap) {\n  if (unwrap === void 0) {\n    unwrap = false;\n  }\n\n  let aborted = await result.deferredData.resolveData(signal);\n\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data\n  };\n}\n\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(v => v === \"\");\n} // Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\n\n\nfunction createUseMatchesMatch(match, loaderData) {\n  let {\n    route,\n    pathname,\n    params\n  } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\n\nfunction getTargetMatch(matches, location) {\n  let search = typeof location === \"string\" ? parsePath(location).search : location.search;\n\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  } // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n\n\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n\nfunction getSubmissionFromNavigation(navigation) {\n  let {\n    formMethod,\n    formAction,\n    formEncType,\n    text,\n    formData,\n    json\n  } = navigation;\n\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined\n    };\n  }\n}\n\nfunction getLoadingNavigation(location, submission) {\n  if (submission) {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text\n    };\n    return navigation;\n  } else {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined\n    };\n    return navigation;\n  }\n}\n\nfunction getSubmittingNavigation(location, submission) {\n  let navigation = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text\n  };\n  return navigation;\n}\n\nfunction getLoadingFetcher(submission, data) {\n  if (submission) {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data,\n      \" _hasFetcherDoneAnything \": true\n    };\n    return fetcher;\n  } else {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data,\n      \" _hasFetcherDoneAnything \": true\n    };\n    return fetcher;\n  }\n}\n\nfunction getSubmittingFetcher(submission, existingFetcher) {\n  let fetcher = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined,\n    \" _hasFetcherDoneAnything \": true\n  };\n  return fetcher;\n}\n\nfunction getDoneFetcher(data) {\n  let fetcher = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data,\n    \" _hasFetcherDoneAnything \": true\n  };\n  return fetcher;\n} //#endregion\n\n\nexport { AbortedDeferredError, Action, ErrorResponse, IDLE_BLOCKER, IDLE_FETCHER, IDLE_NAVIGATION, UNSAFE_DEFERRED_SYMBOL, DeferredData as UNSAFE_DeferredData, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, getPathContributingMatches as UNSAFE_getPathContributingMatches, invariant as UNSAFE_invariant, warning as UNSAFE_warning, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, createStaticHandler, defer, generatePath, getStaticContextFromError, getToPathname, isDeferredData, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, resolvePath, resolveTo, stripBasename };","map":{"version":3,"mappings":"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","names":["Action","PopStateEventType","options","initialEntries","initialIndex","v5Compat","entries","map","entry","index","createMemoryLocation","state","undefined","clampIndex","length","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","key","location","createLocation","pathname","warning","charAt","JSON","stringify","createHref","createPath","history","createURL","URL","encodeLocation","path","parsePath","search","hash","push","Push","nextLocation","splice","delta","replace","Replace","go","nextIndex","listen","fn","createBrowserLocation","window","globalHistory","usr","createBrowserHref","getUrlBasedHistory","createHashLocation","substr","createHashHref","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","validateHashLocation","value","message","Error","cond","console","warn","e","createKey","random","toString","getHistoryState","idx","current","_ref","parsedPath","searchIndex","getLocation","validateLocation","defaultView","getIndex","replaceState","_extends","handlePop","historyState","pushState","error","DOMException","name","assign","origin","invariant","addEventListener","removeEventListener","ResultType","immutableRouteKeys","Set","isIndexRoute","route","convertRoutesToDataRoutes","routes","mapRouteProperties","parentPath","manifest","treePath","id","join","children","indexRoute","pathOrLayoutRoute","matchRoutes","locationArg","basename","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","i","matchRouteBranch","safelyDecodeURI","parentsMeta","flattenRoute","relativePath","meta","caseSensitive","childrenIndex","startsWith","joinPaths","routesMeta","concat","score","computeScore","forEach","_route$path","includes","exploded","explodeOptionalSegments","segments","split","first","rest","isOptional","endsWith","required","restExploded","result","subpath","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","initialScore","some","filter","reduce","segment","test","siblings","every","branch","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","Object","params","pathnameBase","normalizePathname","generatePath","originalPath","prefix","p","String","array","isLastSegment","star","keyMatch","optional","param","pattern","matcher","paramNames","compilePath","captureGroups","memo","paramName","splatValue","safelyDecodeURIComponent","regexpSource","_","RegExp","decodeURI","decodeURIComponent","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","getInvalidPathError","char","field","dest","getPathContributingMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","isEmptyPath","from","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","getToPathname","paths","json","data","init","responseInit","status","headers","Headers","has","set","Response","AbortedDeferredError","DeferredData","constructor","deferredKeys","Array","isArray","reject","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","acc","trackPromise","done","pendingKeysSet","add","promise","race","then","onSettle","catch","defineProperty","get","aborted","delete","emit","settledKey","subscribers","subscriber","subscribe","cancel","abort","v","k","resolveData","resolve","size","unwrappedData","_ref2","unwrapTrackedPromise","pendingKeys","isTrackedPromise","_tracked","_error","_data","defer","redirect","ErrorResponse","statusText","internal","isRouteErrorResponse","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","text","IDLE_FETCHER","IDLE_BLOCKER","proceed","reset","ABSOLUTE_URL_REGEX","defaultMapRouteProperties","hasErrorBoundary","Boolean","createRouter","routerWindow","isBrowser","createElement","isServer","detectErrorBoundary","dataRoutes","inFlightDataRoutes","future","v7_normalizeFormMethod","v7_prependBasename","unlistenHistory","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","hydrationData","initialMatches","initialErrors","getInternalRouterError","getShortCircuitMatches","initialized","m","lazy","loader","router","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","loaderData","actionData","errors","fetchers","Map","blockers","pendingAction","HistoryAction","pendingPreventScrollReset","pendingNavigationController","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeDeferreds","blockerFunctions","ignoreNextHistoryUpdate","initialize","blockerKey","shouldBlockNavigation","currentLocation","updateBlocker","updateState","startNavigation","dispose","clear","deleteFetcher","deleteBlocker","newState","completeNavigation","isActionReload","isMutationMethod","_isRedirect","keys","mergeLoaderData","getSavedScrollPosition","navigate","opts","normalizedPath","normalizeTo","fromRouteId","relative","submission","normalizeNavigateOptions","userReplace","pendingError","revalidate","interruptActiveLoads","startUninterruptedRevalidation","overrideNavigation","saveScrollPosition","routesToUse","loadingNavigation","notFoundMatches","cancelActiveDeferreds","isHashChangeOnly","request","createClientSideRequest","pendingActionData","findNearestBoundary","actionOutput","handleAction","shortCircuited","pendingActionError","getLoadingNavigation","Request","handleLoaders","fetcherSubmission","getSubmittingNavigation","actionMatch","getTargetMatch","type","method","routeId","callLoaderOrAction","isRedirectResult","startRedirectNavigation","isErrorResult","boundaryMatch","isDeferredResult","activeSubmission","getSubmissionFromNavigation","matchesToLoad","revalidatingFetchers","getMatchesToLoad","updatedFetchers","markFetchRedirectsDone","rf","fetcher","revalidatingFetcher","getLoadingFetcher","abortFetcher","abortPendingFetchRevalidations","f","results","loaderResults","fetcherResults","callLoadersAndMaybeResolveData","findRedirect","processLoaderData","deferredData","didAbortFetchLoads","abortStaleFetchLoads","shouldUpdateFetchers","getFetcher","fetch","setFetcherError","handleFetcherAction","handleFetcherLoader","requestMatches","existingFetcher","getSubmittingFetcher","abortController","fetchRequest","actionResult","loadingFetcher","isFetchActionRedirect","revalidationRequest","loadId","loadFetcher","staleKey","doneFetcher","getDoneFetcher","resolveDeferredData","_temp","redirectLocation","_isFetchActionRedirect","isDifferentBasename","redirectHistoryAction","currentMatches","fetchersToLoad","all","resolveDeferredResults","markFetchersDone","doneKeys","landedId","yeetedKeys","getBlocker","blocker","newBlocker","blockerFunction","predicate","cancelledRouteIds","dfd","enableScrollRestoration","positions","getPosition","getKey","y","getScrollKey","createUseMatchesMatch","_internalSetRoutes","newRoutes","_internalFetchControllers","_internalActiveDeferreds","UNSAFE_DEFERRED_SYMBOL","Symbol","query","_temp2","requestContext","isValidMethod","methodNotAllowedMatches","statusCode","loaderHeaders","actionHeaders","queryImpl","isResponse","queryRoute","_temp3","find","values","_result$activeDeferre","routeMatch","submit","loadRouteData","isQueryRouteResponse","isRedirectResponse","response","isRouteRequest","isStaticRequest","Location","context","loaderRequest","getLoaderMatchesUntilBoundary","processRouteLoaderData","executedLoaders","fromEntries","getStaticContextFromError","newContext","_deepestRenderedBoundaryId","isSubmissionNavigation","body","prependBasename","contextualMatches","activeRouteMatch","hasNakedIndexQuery","normalizeFormMethod","isFetcher","getInvalidBodyError","rawFormMethod","toUpperCase","stripHashFromPath","FormData","URLSearchParams","_ref3","parse","searchParams","convertFormDataToSearchParams","convertSearchParamsToFormData","append","boundaryId","boundaryMatches","findIndex","currentUrl","nextUrl","navigationMatches","isNewLoader","currentRouteMatch","nextRouteMatch","shouldRevalidateLoader","currentParams","nextParams","defaultShouldRevalidate","isNewRouteInstance","fetcherMatches","isPerformingInitialLoad","fetcherMatch","shouldRevalidate","currentLoaderData","currentMatch","isNew","isMissingData","currentPath","loaderMatch","arg","routeChoice","loadLazyRouteModule","lazyRoute","routeToUpdate","routeUpdates","lazyRouteProperty","staticRouteValue","isPropertyStaticallyDefined","resultType","onReject","runHandler","handler","protocol","isSameBasename","contentType","isDeferredData","deferred","_result$init","_result$init2","foundError","newLoaderData","mergedLoaderData","hasOwnProperty","eligibleMatches","reverse","_temp4","errorMessage","obj","signals","isRevalidatingLoader","unwrap","getAll","handle","pathMatches"],"sources":["E:\\НАВЧАЛОЧКА\\HW\\REACT\\react-routes\\node_modules\\@remix-run\\router\\history.ts","E:\\НАВЧАЛОЧКА\\HW\\REACT\\react-routes\\node_modules\\@remix-run\\router\\utils.ts","E:\\НАВЧАЛОЧКА\\HW\\REACT\\react-routes\\node_modules\\@remix-run\\router\\router.ts"],"sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: any;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n\n  /**\n   * The delta between this location and the former location in the history stack\n   */\n  delta: number | null;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. May be either a URL or the pieces of a\n * URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Returns a URL for the given `to` value\n   *\n   * @param to - The destination URL\n   */\n  createURL(to: To): URL;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLACE navigations for data routers\n   * behave the same as POP\n   *\n   * @param to Unencoded path\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n  idx: number;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  function createHref(to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to: To) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\",\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 1 });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 0 });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({ action, location: nextLocation, delta });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nexport function warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location, index: number): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  let index = getIndex()!;\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, \"\");\n  }\n\n  function getIndex(): number {\n    let state = globalHistory.state || { idx: null };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({ action, location: history.location, delta });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 1 });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 0 });\n    }\n  }\n\n  function createURL(to: To): URL {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base =\n      window.location.origin !== \"null\"\n        ? window.location.origin\n        : window.location.href;\n\n    let href = typeof to === \"string\" ? to : createPath(to);\n    invariant(\n      base,\n      `No window.location.(origin|href) available to create URL for href: ${href}`\n    );\n    return new URL(href, base);\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { warning, invariant, parsePath } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: any;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  status: number;\n  location: string;\n  revalidate: boolean;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: any;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\ntype LowerCaseFormMethod = \"get\" | \"post\" | \"put\" | \"patch\" | \"delete\";\ntype UpperCaseFormMethod = Uppercase<LowerCaseFormMethod>;\n\n/**\n * Users can specify either lowercase or uppercase form methods on <Form>,\n * useSubmit(), <fetcher.Form>, etc.\n */\nexport type HTMLFormMethod = LowerCaseFormMethod | UpperCaseFormMethod;\n\n/**\n * Active navigation/fetcher form methods are exposed in lowercase on the\n * RouterState\n */\nexport type FormMethod = LowerCaseFormMethod;\nexport type MutationFormMethod = Exclude<FormMethod, \"get\">;\n\n/**\n * In v7, active navigation/fetcher form methods are exposed in uppercase on the\n * RouterState.  This is to align with the normalization done via fetch().\n */\nexport type V7_FormMethod = UpperCaseFormMethod;\nexport type V7_MutationFormMethod = Exclude<V7_FormMethod, \"GET\">;\n\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\"\n  | \"application/json\"\n  | \"text/plain\";\n\n// Thanks https://github.com/sindresorhus/type-fest!\ntype JsonObject = { [Key in string]: JsonValue } & {\n  [Key in string]?: JsonValue | undefined;\n};\ntype JsonArray = JsonValue[] | readonly JsonValue[];\ntype JsonPrimitive = string | number | boolean | null;\ntype JsonValue = JsonPrimitive | JsonObject | JsonArray;\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport type Submission =\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: FormData;\n      json: undefined;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: JsonValue;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: undefined;\n      text: string;\n    };\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs {\n  request: Request;\n  params: Params;\n  context?: any;\n}\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Loaders and actions can return anything except `undefined` (`null` is a\n * valid return value if there is no data to return).  Responses are preferred\n * and will ease any future migration to Remix\n */\ntype DataFunctionValue = Response | NonNullable<unknown> | null;\n\n/**\n * Route loader function signature\n */\nexport interface LoaderFunction {\n  (args: LoaderFunctionArgs): Promise<DataFunctionValue> | DataFunctionValue;\n}\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction {\n  (args: ActionFunctionArgs): Promise<DataFunctionValue> | DataFunctionValue;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: {\n    currentUrl: URL;\n    currentParams: AgnosticDataRouteMatch[\"params\"];\n    nextUrl: URL;\n    nextParams: AgnosticDataRouteMatch[\"params\"];\n    formMethod?: Submission[\"formMethod\"];\n    formAction?: Submission[\"formAction\"];\n    formEncType?: Submission[\"formEncType\"];\n    text?: Submission[\"text\"];\n    formData?: Submission[\"formData\"];\n    json?: Submission[\"json\"];\n    actionResult?: DataResult;\n    defaultShouldRevalidate: boolean;\n  }): boolean;\n}\n\n/**\n * Function provided by the framework-aware layers to set `hasErrorBoundary`\n * from the framework-aware `errorElement` prop\n *\n * @deprecated Use `mapRouteProperties` instead\n */\nexport interface DetectErrorBoundaryFunction {\n  (route: AgnosticRouteObject): boolean;\n}\n\n/**\n * Function provided by the framework-aware layers to set any framework-specific\n * properties from framework-agnostic properties\n */\nexport interface MapRoutePropertiesFunction {\n  (route: AgnosticRouteObject): {\n    hasErrorBoundary: boolean;\n  } & Record<string, any>;\n}\n\n/**\n * Keys we cannot change from within a lazy() function. We spread all other keys\n * onto the route. Either they're meaningful to the router, or they'll get\n * ignored.\n */\nexport type ImmutableRouteKey =\n  | \"lazy\"\n  | \"caseSensitive\"\n  | \"path\"\n  | \"id\"\n  | \"index\"\n  | \"children\";\n\nexport const immutableRouteKeys = new Set<ImmutableRouteKey>([\n  \"lazy\",\n  \"caseSensitive\",\n  \"path\",\n  \"id\",\n  \"index\",\n  \"children\",\n]);\n\n/**\n * lazy() function to load a route definition, which can add non-matching\n * related properties to a route\n */\nexport interface LazyRouteFunction<R extends AgnosticRouteObject> {\n  (): Promise<Omit<R, ImmutableRouteKey>>;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction;\n  action?: ActionFunction;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n  lazy?: LazyRouteFunction<AgnosticBaseRouteObject>;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\nexport type RouteManifest = Record<string, AgnosticDataRouteObject | undefined>;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `:${infer Param}`\n    ? Param extends `${infer Optional}?`\n      ? Optional\n      : Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\ntype PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\" | \"/*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  mapRouteProperties: MapRoutePropertiesFunction,\n  parentPath: number[] = [],\n  manifest: RouteManifest = {}\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !manifest[id],\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n      };\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n        children: undefined,\n      };\n      manifest[id] = pathOrLayoutRoute;\n\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(\n          route.children,\n          mapRouteProperties,\n          treePath,\n          manifest\n        );\n      }\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch<string, RouteObjectType>(\n      branches[i],\n      // Incoming pathnames are generally encoded from either window.location\n      // or from router.navigate, but we want to match against the unencoded\n      // paths in the route definitions.  Memory router locations won't be\n      // encoded here but there also shouldn't be anything to decode so this\n      // should be a safe operation.  This avoids needing matchRoutes to be\n      // history-aware.\n      safelyDecodeURI(pathname)\n    );\n  }\n\n  return matches;\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  let flattenRoute = (\n    route: RouteObjectType,\n    index: number,\n    relativePath?: string\n  ) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath:\n        relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta,\n    });\n  };\n  routes.forEach((route, index) => {\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !route.path?.includes(\"?\")) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n\n  return branches;\n}\n\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path: string): string[] {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n\n  let [first, ...rest] = segments;\n\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n\n  let result: string[] = [];\n\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explodes _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(\n    ...restExploded.map((subpath) =>\n      subpath === \"\" ? required : [required, subpath].join(\"/\")\n    )\n  );\n\n  // Then if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map((exploded) =>\n    path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded\n  );\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  originalPath: Path,\n  params: {\n    [key in PathParam<Path>]: string | null;\n  } = {} as any\n): string {\n  let path: string = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(\n      false,\n      `Route path \"${path}\" will be treated as if it were ` +\n        `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n        `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n        `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n    );\n    path = path.replace(/\\*$/, \"/*\") as Path;\n  }\n\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n\n  const stringify = (p: any) =>\n    p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n\n  const segments = path\n    .split(/\\/+/)\n    .map((segment, index, array) => {\n      const isLastSegment = index === array.length - 1;\n\n      // only apply the splat if it's the last segment\n      if (isLastSegment && segment === \"*\") {\n        const star = \"*\" as PathParam<Path>;\n        // Apply the splat\n        return stringify(params[star]);\n      }\n\n      const keyMatch = segment.match(/^:(\\w+)(\\??)$/);\n      if (keyMatch) {\n        const [, key, optional] = keyMatch;\n        let param = params[key as PathParam<Path>];\n        invariant(optional === \"?\" || param != null, `Missing \":${key}\" param`);\n        return stringify(param);\n      }\n\n      // Remove any optional markers from optional static segments\n      return segment.replace(/\\?$/g, \"\");\n    })\n    // Remove empty segments\n    .filter((segment) => !!segment);\n\n  return prefix + segments.join(\"/\");\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, paramNames] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = paramNames.reduce<Mutable<Params>>(\n    (memo, paramName, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      memo[paramName] = safelyDecodeURIComponent(\n        captureGroups[index] || \"\",\n        paramName\n      );\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, string[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let paramNames: string[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(/\\/:(\\w+)/g, (_: string, paramName: string) => {\n        paramNames.push(paramName);\n        return \"/([^\\\\/]+)\";\n      });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURI(value: string) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value: string, paramName: string) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeysSet: Set<string> = new Set<string>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscribers: Set<(aborted: boolean, settledKey?: string) => void> =\n    new Set();\n  data: Record<string, unknown>;\n  init?: ResponseInit;\n  deferredKeys: string[] = [];\n\n  constructor(data: Record<string, unknown>, responseInit?: ResponseInit) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  private trackPromise(\n    key: string,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, null, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    if (error) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    this.emit(false, key);\n    return data;\n  }\n\n  private emit(aborted: boolean, settledKey?: string) {\n    this.subscribers.forEach((subscriber) => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn: (aborted: boolean, settledKey?: string) => void) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport type DeferFunction = (\n  data: Record<string, unknown>,\n  init?: number | ResponseInit\n) => DeferredData;\n\nexport const defer: DeferFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  return new DeferredData(data, responseInit);\n};\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\nexport class ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n  error?: Error;\n  internal: boolean;\n\n  constructor(\n    status: number,\n    statusText: string | undefined,\n    data: any,\n    internal = false\n  ) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nexport function isRouteErrorResponse(error: any): error is ErrorResponse {\n  return (\n    error != null &&\n    typeof error.status === \"number\" &&\n    typeof error.statusText === \"string\" &&\n    typeof error.internal === \"boolean\" &&\n    \"data\" in error\n  );\n}\n","import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  invariant,\n  parsePath,\n  warning,\n} from \"./history\";\nimport type {\n  DataResult,\n  DeferredData,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DeferredResult,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  DetectErrorBoundaryFunction,\n  RedirectResult,\n  RouteData,\n  AgnosticRouteObject,\n  Submission,\n  SuccessResult,\n  AgnosticRouteMatch,\n  ShouldRevalidateFunction,\n  RouteManifest,\n  ImmutableRouteKey,\n  ActionFunction,\n  LoaderFunction,\n  V7_MutationFormMethod,\n  V7_FormMethod,\n  HTMLFormMethod,\n  MutationFormMethod,\n  MapRoutePropertiesFunction,\n} from \"./utils\";\nimport {\n  ErrorResponse,\n  ResultType,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  immutableRouteKeys,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  resolveTo,\n  stripBasename,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): Promise<void>;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To | null, opts?: RouterNavigateOptions): Promise<void>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to URL encode a destination path according to the internal\n   * history implementation\n   * @param to\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key?: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key?: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get a navigation blocker\n   * @param key The identifier for the blocker\n   * @param fn The blocker function implementation\n   */\n  getBlocker(key: string, fn: BlockerFunction): Blocker;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete a navigation blocker\n   * @param key The identifier for the blocker\n   */\n  deleteBlocker(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * HMR needs to pass in-flight route updates to React Router\n   * TODO: Replace this with granular route update APIs (addRoute, updateRoute, deleteRoute)\n   */\n  _internalSetRoutes(routes: AgnosticRouteObject[]): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n\n  /**\n   * Map of current blockers\n   */\n  blockers: Map<string, Blocker>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface FutureConfig {\n  v7_normalizeFormMethod: boolean;\n  v7_prependBasename: boolean;\n}\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  routes: AgnosticRouteObject[];\n  history: History;\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<FutureConfig>;\n  hydrationData?: HydrationState;\n  window?: Window;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  basename: Router[\"basename\"];\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  activeDeferreds: Record<string, DeferredData> | null;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(\n    request: Request,\n    opts?: { requestContext?: unknown }\n  ): Promise<StaticHandlerContext | Response>;\n  queryRoute(\n    request: Request,\n    opts?: { routeId?: string; requestContext?: unknown }\n  ): Promise<any>;\n}\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (state: RouterState): void;\n}\n\ninterface UseMatchesMatch {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: unknown;\n  handle: unknown;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UseMatchesMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\nexport type RelativeRoutingType = \"route\" | \"path\";\n\n// Allowed for any navigation or fetch\ntype BaseNavigateOrFetchOptions = {\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n};\n\n// Only allowed for navigations\ntype BaseNavigateOptions = BaseNavigateOrFetchOptions & {\n  replace?: boolean;\n  state?: any;\n  fromRouteId?: string;\n};\n\n// Only allowed for submission navigations\ntype BaseSubmissionOptions = {\n  formMethod?: HTMLFormMethod;\n  formEncType?: FormEncType;\n} & (\n  | { formData: FormData; body?: undefined }\n  | { formData?: undefined; body: any }\n);\n\n/**\n * Options for a navigate() call for a normal (non-submission) navigation\n */\ntype LinkNavigateOptions = BaseNavigateOptions;\n\n/**\n * Options for a navigate() call for a submission navigation\n */\ntype SubmissionNavigateOptions = BaseNavigateOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to navigate() for a navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options for a fetch() load\n */\ntype LoadFetchOptions = BaseNavigateOrFetchOptions;\n\n/**\n * Options for a fetch() submission\n */\ntype SubmitFetchOptions = BaseNavigateOrFetchOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions = LoadFetchOptions | SubmitFetchOptions;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    json: undefined;\n    text: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    text: Submission[\"text\"];\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    text: undefined;\n    formData: undefined;\n    json: undefined;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    text: Submission[\"text\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface BlockerBlocked {\n  state: \"blocked\";\n  reset(): void;\n  proceed(): void;\n  location: Location;\n}\n\ninterface BlockerUnblocked {\n  state: \"unblocked\";\n  reset: undefined;\n  proceed: undefined;\n  location: undefined;\n}\n\ninterface BlockerProceeding {\n  state: \"proceeding\";\n  reset: undefined;\n  proceed: undefined;\n  location: Location;\n}\n\nexport type Blocker = BlockerUnblocked | BlockerBlocked | BlockerProceeding;\n\nexport type BlockerFunction = (args: {\n  currentLocation: Location;\n  nextLocation: Location;\n  historyAction: HistoryAction;\n}) => boolean;\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Error thrown from the current action, keyed by the route containing the\n   * error boundary to render the error.  To be committed to the state after\n   * loaders have completed\n   */\n  pendingActionError?: RouteData;\n  /**\n   * Data returned from the current action, keyed by the route owning the action.\n   * To be committed to the state after loaders have completed\n   */\n  pendingActionData?: RouteData;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Cached info for active fetcher.load() instances so they can participate\n * in revalidation\n */\ninterface FetchLoadMatch {\n  routeId: string;\n  path: string;\n}\n\n/**\n * Identified fetcher.load() calls that need to be revalidated\n */\ninterface RevalidatingFetcher extends FetchLoadMatch {\n  key: string;\n  match: AgnosticDataRouteMatch | null;\n  matches: AgnosticDataRouteMatch[] | null;\n  controller: AbortController | null;\n}\n\n/**\n * Wrapper object to allow us to throw any response out from callLoaderOrAction\n * for queryRouter while preserving whether or not it was thrown or returned\n * from the loader/action\n */\ninterface QueryRouteResponse {\n  type: ResultType.data | ResultType.error;\n  response: Response;\n}\n\nconst validMutationMethodsArr: MutationFormMethod[] = [\n  \"post\",\n  \"put\",\n  \"patch\",\n  \"delete\",\n];\nconst validMutationMethods = new Set<MutationFormMethod>(\n  validMutationMethodsArr\n);\n\nconst validRequestMethodsArr: FormMethod[] = [\n  \"get\",\n  ...validMutationMethodsArr,\n];\nconst validRequestMethods = new Set<FormMethod>(validRequestMethodsArr);\n\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_BLOCKER: BlockerUnblocked = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined,\n};\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\nconst defaultMapRouteProperties: MapRoutePropertiesFunction = (route) => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary),\n});\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  const routerWindow = init.window\n    ? init.window\n    : typeof window !== \"undefined\"\n    ? window\n    : undefined;\n  const isBrowser =\n    typeof routerWindow !== \"undefined\" &&\n    typeof routerWindow.document !== \"undefined\" &&\n    typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n\n  // Routes keyed by ID\n  let manifest: RouteManifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(\n    init.routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n  let inFlightDataRoutes: AgnosticDataRouteObject[] | undefined;\n  let basename = init.basename || \"/\";\n  // Config driven behavior flags\n  let future: FutureConfig = {\n    v7_normalizeFormMethod: false,\n    v7_prependBasename: false,\n    ...init.future,\n  };\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname,\n    });\n    let { matches, route } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  let initialized =\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    !initialMatches.some((m) => m.route.lazy) &&\n    // And we have to either have no loaders or have been provided hydrationData\n    (!initialMatches.some((m) => m.route.loader) || init.hydrationData != null);\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: string[] = [];\n\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set<string>();\n\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map<string, BlockerFunction>();\n\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let ignoreNextHistoryUpdate = false;\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location, delta }) => {\n        // Ignore this event if it was just us resetting the URL from a\n        // blocked POP navigation\n        if (ignoreNextHistoryUpdate) {\n          ignoreNextHistoryUpdate = false;\n          return;\n        }\n\n        warning(\n          blockerFunctions.size === 0 || delta != null,\n          \"You are trying to use a blocker on a POP navigation to a location \" +\n            \"that was not created by @remix-run/router. This will fail silently in \" +\n            \"production. This can happen if you are navigating outside the router \" +\n            \"via `window.history.pushState`/`window.location.hash` instead of using \" +\n            \"router navigation APIs.  This can also happen if you are using \" +\n            \"createHashRouter and the user manually changes the URL.\"\n        );\n\n        let blockerKey = shouldBlockNavigation({\n          currentLocation: state.location,\n          nextLocation: location,\n          historyAction,\n        });\n\n        if (blockerKey && delta != null) {\n          // Restore the URL to match the current UI, but don't update router state\n          ignoreNextHistoryUpdate = true;\n          init.history.go(delta * -1);\n\n          // Put the blocker into a blocked state\n          updateBlocker(blockerKey, {\n            state: \"blocked\",\n            location,\n            proceed() {\n              updateBlocker(blockerKey!, {\n                state: \"proceeding\",\n                proceed: undefined,\n                reset: undefined,\n                location,\n              });\n              // Re-do the same POP navigation we just blocked\n              init.history.go(delta);\n            },\n            reset() {\n              let blockers = new Map(state.blockers);\n              blockers.set(blockerKey!, IDLE_BLOCKER);\n              updateState({ blockers });\n            },\n          });\n          return;\n        }\n\n        return startNavigation(historyAction, location);\n      }\n    );\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location);\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(newState: Partial<RouterState>): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n    subscribers.forEach((subscriber) => subscriber(state));\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      isMutationMethod(state.navigation.formMethod) &&\n      state.navigation.state === \"loading\" &&\n      location.state?._isRedirect !== true;\n\n    let actionData: RouteData | null;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData\n      ? mergeLoaderData(\n          state.loaderData,\n          newState.loaderData,\n          newState.matches || [],\n          newState.errors\n        )\n      : state.loaderData;\n\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    let blockers = new Map();\n    blockerFunctions.clear();\n\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset =\n      pendingPreventScrollReset === true ||\n      (state.navigation.formMethod != null &&\n        isMutationMethod(state.navigation.formMethod) &&\n        location.state?._isRedirect !== true);\n\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    updateState({\n      ...newState, // matches, errors, fetchers go through as-is\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(\n        location,\n        newState.matches || state.matches\n      ),\n      preventScrollReset,\n      blockers,\n    });\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To | null,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      to,\n      opts?.fromRouteId,\n      opts?.relative\n    );\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      false,\n      normalizedPath,\n      opts\n    );\n\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = {\n      ...nextLocation,\n      ...init.history.encodeLocation(nextLocation),\n    };\n\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n\n    let historyAction = HistoryAction.Push;\n\n    if (userReplace === true) {\n      historyAction = HistoryAction.Replace;\n    } else if (userReplace === false) {\n      // no-op\n    } else if (\n      submission != null &&\n      isMutationMethod(submission.formMethod) &&\n      submission.formAction === state.location.pathname + state.location.search\n    ) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = HistoryAction.Replace;\n    }\n\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction,\n    });\n\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey!, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation,\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey!, IDLE_BLOCKER);\n          updateState({ blockers });\n        },\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponse;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename);\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(routesToUse);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error,\n        },\n      });\n      return;\n    }\n\n    // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial load will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n    if (\n      state.initialized &&\n      !isRevalidationRequired &&\n      isHashChangeOnly(state.location, location) &&\n      !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))\n    ) {\n      completeNavigation(location, { matches });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(\n      init.history,\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionData: RouteData | undefined;\n    let pendingError: RouteData | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError,\n      };\n    } else if (\n      opts &&\n      opts.submission &&\n      isMutationMethod(opts.submission.formMethod)\n    ) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        { replace: opts.replace }\n      );\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n\n      // Create a GET request for the loaders\n      request = new Request(request.url, { signal: request.signal });\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      request,\n      location,\n      matches,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.fetcherSubmission,\n      opts && opts.replace,\n      pendingActionData,\n      pendingError\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches,\n      ...(pendingActionData ? { actionData: pendingActionData } : {}),\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    opts: { replace?: boolean } = {}\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({ navigation });\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id,\n        }),\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        manifest,\n        mapRouteProperties,\n        basename\n      );\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace: boolean;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace =\n          result.location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(state, result, { submission, replace });\n      return { shortCircuited: true };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: { [boundaryMatch.route.id]: result.error },\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    return {\n      pendingActionData: { [actionMatch.route.id]: result.data },\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    fetcherSubmission?: Submission,\n    replace?: boolean,\n    pendingActionData?: RouteData,\n    pendingError?: RouteData\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation =\n      overrideNavigation || getLoadingNavigation(location, submission);\n\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission =\n      submission ||\n      fetcherSubmission ||\n      getSubmissionFromNavigation(loadingNavigation);\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      activeSubmission,\n      location,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      pendingActionData,\n      pendingError\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(location, {\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null,\n        ...(pendingActionData ? { actionData: pendingActionData } : {}),\n        ...(updatedFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n      });\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach((rf) => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher = getLoadingFetcher(\n          undefined,\n          fetcher ? fetcher.data : undefined\n        );\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState({\n        navigation: loadingNavigation,\n        ...(actionData\n          ? Object.keys(actionData).length === 0\n            ? { actionData: null }\n            : { actionData }\n          : {}),\n        ...(revalidatingFetchers.length > 0\n          ? { fetchers: new Map(state.fetchers) }\n          : {}),\n      });\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach((rf) => {\n      if (fetchControllers.has(rf.key)) {\n        abortFetcher(rf.key);\n      }\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((f) => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n    revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      await startRedirectNavigation(state, redirect, { replace });\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingError,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers =\n      updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n\n    return {\n      loaderData,\n      errors,\n      ...(shouldUpdateFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n    };\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      href,\n      routeId,\n      opts?.relative\n    );\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n\n    if (!matches) {\n      setFetcherError(\n        key,\n        routeId,\n        getInternalRouterError(404, { pathname: normalizedPath })\n      );\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      true,\n      normalizedPath,\n      opts\n    );\n\n    if (error) {\n      setFetcherError(key, routeId, error);\n      return;\n    }\n\n    let match = getTargetMatch(matches, path);\n\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, { routeId, path });\n    handleFetcherLoader(key, routeId, path, match, matches, submission);\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action && !match.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId,\n      });\n      setFetcherError(key, routeId, error);\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    let fetcher = getSubmittingFetcher(submission, existingFetcher);\n    state.fetchers.set(key, fetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal,\n      submission\n    );\n    fetchControllers.set(key, abortController);\n\n    let actionResult = await callLoaderOrAction(\n      \"action\",\n      fetchRequest,\n      match,\n      requestMatches,\n      manifest,\n      mapRouteProperties,\n      basename\n    );\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n      let loadingFetcher = getLoadingFetcher(submission);\n      state.fetchers.set(key, loadingFetcher);\n      updateState({ fetchers: new Map(state.fetchers) });\n\n      return startRedirectNavigation(state, actionResult, {\n        submission,\n        isFetchActionRedirect: true,\n      });\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(\n      init.history,\n      nextLocation,\n      abortController.signal\n    );\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(routesToUse, state.navigation.location, basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      submission,\n      nextLocation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      { [match.route.id]: actionResult.data },\n      undefined // No need to send through errors since we short circuit above\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter((rf) => rf.key !== key)\n      .forEach((rf) => {\n        let staleKey = rf.key;\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher = getLoadingFetcher(\n          undefined,\n          existingFetcher ? existingFetcher.data : undefined\n        );\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        if (fetchControllers.has(staleKey)) {\n          abortFetcher(staleKey);\n        }\n        if (rf.controller) {\n          fetchControllers.set(staleKey, rf.controller);\n        }\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((rf) => abortFetcher(rf.key));\n\n    abortController.signal.addEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    abortController.signal.removeEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach((r) => fetchControllers.delete(r.key));\n\n    let redirect = findRedirect(results);\n    if (redirect) {\n      return startRedirectNavigation(state, redirect);\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(\n          state.loaderData,\n          loaderData,\n          matches,\n          errors\n        ),\n        ...(didAbortFetchLoads || revalidatingFetchers.length > 0\n          ? { fetchers: new Map(state.fetchers) }\n          : {}),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[],\n    submission?: Submission\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    // Put this fetcher into it's loading state\n    let loadingFetcher = getLoadingFetcher(\n      submission,\n      existingFetcher ? existingFetcher.data : undefined\n    );\n    state.fetchers.set(key, loadingFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal\n    );\n    fetchControllers.set(key, abortController);\n\n    let result: DataResult = await callLoaderOrAction(\n      \"loader\",\n      fetchRequest,\n      match,\n      matches,\n      manifest,\n      mapRouteProperties,\n      basename\n    );\n\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      fetchRedirectIds.add(key);\n      await startRedirectNavigation(state, result);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key);\n      // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error,\n        },\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    let doneFetcher = getDoneFetcher(result.data);\n    state.fetchers.set(key, doneFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    state: RouterState,\n    redirect: RedirectResult,\n    {\n      submission,\n      replace,\n      isFetchActionRedirect,\n    }: {\n      submission?: Submission;\n      replace?: boolean;\n      isFetchActionRedirect?: boolean;\n    } = {}\n  ) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    let redirectLocation = createLocation(\n      state.location,\n      redirect.location,\n      // TODO: This can be removed once we get rid of useTransition in Remix v2\n      {\n        _isRedirect: true,\n        ...(isFetchActionRedirect ? { _isFetchActionRedirect: true } : {}),\n      }\n    );\n    invariant(\n      redirectLocation,\n      \"Expected a location on the redirect navigation\"\n    );\n    // Check if this an absolute external redirect that goes to a new origin\n    if (ABSOLUTE_URL_REGEX.test(redirect.location) && isBrowser) {\n      let url = init.history.createURL(redirect.location);\n      let isDifferentBasename = stripBasename(url.pathname, basename) == null;\n\n      if (routerWindow.location.origin !== url.origin || isDifferentBasename) {\n        if (replace) {\n          routerWindow.location.replace(redirect.location);\n        } else {\n          routerWindow.location.assign(redirect.location);\n        }\n        return;\n      }\n    }\n\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true ? HistoryAction.Replace : HistoryAction.Push;\n\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let activeSubmission =\n      submission || getSubmissionFromNavigation(state.navigation);\n\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    if (\n      redirectPreserveMethodStatusCodes.has(redirect.status) &&\n      activeSubmission &&\n      isMutationMethod(activeSubmission.formMethod)\n    ) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          ...activeSubmission,\n          formAction: redirect.location,\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    } else if (isFetchActionRedirect) {\n      // For a fetch action redirect, we kick off a new loading navigation\n      // without the fetcher submission, but we send it along for shouldRevalidate\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: getLoadingNavigation(redirectLocation),\n        fetcherSubmission: activeSubmission,\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    } else {\n      // If we have a submission, we will preserve it through the redirect navigation\n      let overrideNavigation = getLoadingNavigation(\n        redirectLocation,\n        activeSubmission\n      );\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    currentMatches: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          manifest,\n          mapRouteProperties,\n          basename\n        )\n      ),\n      ...fetchersToLoad.map((f) => {\n        if (f.matches && f.match && f.controller) {\n          return callLoaderOrAction(\n            \"loader\",\n            createClientSideRequest(init.history, f.path, f.controller.signal),\n            f.match,\n            f.matches,\n            manifest,\n            mapRouteProperties,\n            basename\n          );\n        } else {\n          let error: ErrorResult = {\n            type: ResultType.error,\n            error: getInternalRouterError(404, { pathname: f.path }),\n          };\n          return error;\n        }\n      }),\n    ]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    await Promise.all([\n      resolveDeferredResults(\n        currentMatches,\n        matchesToLoad,\n        loaderResults,\n        loaderResults.map(() => request.signal),\n        false,\n        state.loaderData\n      ),\n      resolveDeferredResults(\n        currentMatches,\n        fetchersToLoad.map((f) => f.match),\n        fetcherResults,\n        fetchersToLoad.map((f) => (f.controller ? f.controller.signal : null)),\n        true\n      ),\n    ]);\n\n    return { results, loaderResults, fetcherResults };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key: string, routeId: string, error: any) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error,\n      },\n      fetchers: new Map(state.fetchers),\n    });\n  }\n\n  function deleteFetcher(key: string): void {\n    let fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (\n      fetchControllers.has(key) &&\n      !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))\n    ) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): boolean {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key: string, fn: BlockerFunction) {\n    let blocker: Blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key: string) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key: string, newBlocker: Blocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(\n      (blocker.state === \"unblocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"proceeding\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"unblocked\") ||\n        (blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\"),\n      `Invalid blocker state transition: ${blocker.state} -> ${newBlocker.state}`\n    );\n\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({ blockers });\n  }\n\n  function shouldBlockNavigation({\n    currentLocation,\n    nextLocation,\n    historyAction,\n  }: {\n    currentLocation: Location;\n    nextLocation: Location;\n    historyAction: HistoryAction;\n  }): string | undefined {\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({ currentLocation, nextLocation, historyAction })) {\n      return blockerKey;\n    }\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null;\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function getScrollKey(location: Location, matches: AgnosticDataRouteMatch[]) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(\n        location,\n        matches.map((m) => createUseMatchesMatch(m, state.loaderData))\n      );\n      return key || location.key;\n    }\n    return location.key;\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  function _internalSetRoutes(newRoutes: AgnosticDataRouteObject[]) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(\n      newRoutes,\n      mapRouteProperties,\n      undefined,\n      manifest\n    );\n  }\n\n  router = {\n    get basename() {\n      return basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    encodeLocation: (to: To) => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport const UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\nexport interface CreateStaticHandlerOptions {\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n}\n\nexport function createStaticHandler(\n  routes: AgnosticRouteObject[],\n  opts?: CreateStaticHandlerOptions\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to createStaticHandler\"\n  );\n\n  let manifest: RouteManifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (opts?.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts?.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n\n  let dataRoutes = convertRoutesToDataRoutes(\n    routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  async function query(\n    request: Request,\n    { requestContext }: { requestContext?: unknown } = {}\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, { method });\n      let { matches: methodNotAllowedMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext);\n    if (isResponse(result)) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, basename, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n  async function queryRoute(\n    request: Request,\n    {\n      routeId,\n      requestContext,\n    }: { requestContext?: unknown; routeId?: string } = {}\n  ): Promise<any> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, { method });\n    } else if (!matches) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId,\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      match\n    );\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      let data = Object.values(result.loaderData)[0];\n      if (result.activeDeferreds?.[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          requestContext,\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        routeMatch\n      );\n      return isResponse(result)\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error && !isRedirectResponse(e.response)) {\n          throw e.response;\n        }\n        return e.response;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    requestContext: unknown,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    let result: DataResult;\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id,\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        manifest,\n        mapRouteProperties,\n        basename,\n        { isStaticRequest: true, isRouteRequest, requestContext }\n      );\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(`${method}() call aborted`);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, { type: \"defer-action\" });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        undefined,\n        {\n          [boundaryMatch.route.id]: result.error,\n        }\n      );\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal,\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n\n    return {\n      ...context,\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      actionHeaders: {\n        ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n      },\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch,\n    pendingActionError?: RouteData\n  ): Promise<\n    | Omit<\n        StaticHandlerContext,\n        \"location\" | \"basename\" | \"actionData\" | \"actionHeaders\"\n      >\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (\n      isRouteRequest &&\n      !routeMatch?.route.loader &&\n      !routeMatch?.route.lazy\n    ) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch?.route.id,\n      });\n    }\n\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : getLoaderMatchesUntilBoundary(\n          matches,\n          Object.keys(pendingActionError || {})[0]\n        );\n    let matchesToLoad = requestMatches.filter(\n      (m) => m.route.loader || m.route.lazy\n    );\n\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce(\n          (acc, m) => Object.assign(acc, { [m.route.id]: null }),\n          {}\n        ),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          manifest,\n          mapRouteProperties,\n          basename,\n          { isStaticRequest: true, isRouteRequest, requestContext }\n        )\n      ),\n    ]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(`${method}() call aborted`);\n    }\n\n    // Process and commit output from loaders\n    let activeDeferreds = new Map<string, DeferredData>();\n    let context = processRouteLoaderData(\n      matches,\n      matchesToLoad,\n      results,\n      pendingActionError,\n      activeDeferreds\n    );\n\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set<string>(\n      matchesToLoad.map((match) => match.route.id)\n    );\n    matches.forEach((match) => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n\n    return {\n      ...context,\n      matches,\n      activeDeferreds:\n        activeDeferreds.size > 0\n          ? Object.fromEntries(activeDeferreds.entries())\n          : null,\n    };\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\nfunction isSubmissionNavigation(\n  opts: RouterNavigateOptions\n): opts is SubmissionNavigateOptions {\n  return (\n    opts != null &&\n    ((\"formData\" in opts && opts.formData != null) ||\n      (\"body\" in opts && opts.body !== undefined))\n  );\n}\n\nfunction normalizeTo(\n  location: Path,\n  matches: AgnosticDataRouteMatch[],\n  basename: string,\n  prependBasename: boolean,\n  to: To | null,\n  fromRouteId?: string,\n  relative?: RelativeRoutingType\n) {\n  let contextualMatches: AgnosticDataRouteMatch[];\n  let activeRouteMatch: AgnosticDataRouteMatch | undefined;\n  if (fromRouteId != null && relative !== \"path\") {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route.  When using relative:path,\n    // fromRouteId is ignored since that is always relative to the current\n    // location path\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n\n  // Resolve the relative path\n  let path = resolveTo(\n    to ? to : \".\",\n    getPathContributingMatches(contextualMatches).map((m) => m.pathnameBase),\n    stripBasename(location.pathname, basename) || location.pathname,\n    relative === \"path\"\n  );\n\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n\n  // Add an ?index param for matched index routes if we don't already have one\n  if (\n    (to == null || to === \"\" || to === \".\") &&\n    activeRouteMatch &&\n    activeRouteMatch.route.index &&\n    !hasNakedIndexQuery(path.search)\n  ) {\n    path.search = path.search\n      ? path.search.replace(/^\\?/, \"?index&\")\n      : \"?index\";\n  }\n\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname =\n      path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  normalizeFormMethod: boolean,\n  isFetcher: boolean,\n  path: string,\n  opts?: RouterNavigateOptions\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponse;\n} {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return { path };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, { method: opts.formMethod }),\n    };\n  }\n\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, { type: \"invalid-body\" }),\n  });\n\n  // Create a Submission on non-GET navigations\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = normalizeFormMethod\n    ? (rawFormMethod.toUpperCase() as V7_FormMethod)\n    : (rawFormMethod.toLowerCase() as FormMethod);\n  let formAction = stripHashFromPath(path);\n\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      let text =\n        typeof opts.body === \"string\"\n          ? opts.body\n          : opts.body instanceof FormData ||\n            opts.body instanceof URLSearchParams\n          ? // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n            Array.from(opts.body.entries()).reduce(\n              (acc, [name, value]) => `${acc}${name}=${value}\\n`,\n              \"\"\n            )\n          : String(opts.body);\n\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text,\n        },\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      try {\n        let json =\n          typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined,\n          },\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n\n  invariant(\n    typeof FormData === \"function\",\n    \"FormData is not available in this environment\"\n  );\n\n  let searchParams: URLSearchParams;\n  let formData: FormData;\n\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n\n  let submission: Submission = {\n    formMethod,\n    formAction,\n    formEncType:\n      (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n    formData,\n    json: undefined,\n    text: undefined,\n  };\n\n  if (isMutationMethod(submission.formMethod)) {\n    return { path, submission };\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = `?${searchParams}`;\n\n  return { path: createPath(parsedPath), submission };\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId?: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  history: History,\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: string[],\n  fetchLoadMatches: Map<string, FetchLoadMatch>,\n  fetchRedirectIds: Set<string>,\n  routesToUse: AgnosticDataRouteObject[],\n  basename: string | undefined,\n  pendingActionData?: RouteData,\n  pendingError?: RouteData\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingError\n    ? Object.values(pendingError)[0]\n    : pendingActionData\n    ? Object.values(pendingActionData)[0]\n    : undefined;\n\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    if (match.route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n    if (match.route.loader == null) {\n      return false;\n    }\n\n    // Always call the loader on new route instances and pending defer cancellations\n    if (\n      isNewLoader(state.loaderData, state.matches[index], match) ||\n      cancelledDeferredRoutes.some((id) => id === match.route.id)\n    ) {\n      return true;\n    }\n\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n\n    return shouldRevalidateLoader(match, {\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate:\n        // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n        isRevalidationRequired ||\n        // Clicked the same link, resubmitted a GET form\n        currentUrl.pathname + currentUrl.search ===\n          nextUrl.pathname + nextUrl.search ||\n        // Search params affect all loaders\n        currentUrl.search !== nextUrl.search ||\n        isNewRouteInstance(currentRouteMatch, nextRouteMatch),\n    });\n  });\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate if fetcher won't be present in the subsequent render\n    if (!matches.some((m) => m.route.id === f.routeId)) {\n      return;\n    }\n\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null,\n      });\n      return;\n    }\n\n    // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They only set `defaultShouldRevalidate` on\n    // explicit revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n    //\n    // They automatically revalidate without even calling shouldRevalidate if:\n    // - They were cancelled\n    // - They're in the middle of their first load and therefore this is still\n    //   an initial load and not a revalidation\n    //\n    // If neither of those is true, then they _always_ check shouldRevalidate\n    let fetcher = state.fetchers.get(key);\n    let isPerformingInitialLoad =\n      fetcher &&\n      fetcher.state !== \"idle\" &&\n      fetcher.data === undefined &&\n      // If a fetcher.load redirected then it'll be \"loading\" without any data\n      // so ensure we're not processing the redirect from this fetcher\n      !fetchRedirectIds.has(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n    let shouldRevalidate =\n      cancelledFetcherLoads.includes(key) ||\n      isPerformingInitialLoad ||\n      shouldRevalidateLoader(fetcherMatch, {\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params,\n        ...submission,\n        actionResult,\n        defaultShouldRevalidate: isRevalidationRequired,\n      });\n\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController(),\n      });\n    }\n  });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath != null &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  loaderMatch: AgnosticDataRouteMatch,\n  arg: Parameters<ShouldRevalidateFunction>[0]\n) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(\n  route: AgnosticDataRouteObject,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  manifest: RouteManifest\n) {\n  if (!route.lazy) {\n    return;\n  }\n\n  let lazyRoute = await route.lazy();\n\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates: Record<string, any> = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue =\n      routeToUpdate[lazyRouteProperty as keyof typeof routeToUpdate];\n\n    let isPropertyStaticallyDefined =\n      staticRouteValue !== undefined &&\n      // This property isn't static since it should always be updated based\n      // on the route updates\n      lazyRouteProperty !== \"hasErrorBoundary\";\n\n    warning(\n      !isPropertyStaticallyDefined,\n      `Route \"${routeToUpdate.id}\" has a static property \"${lazyRouteProperty}\" ` +\n        `defined but its lazy function is also returning a value for this property. ` +\n        `The lazy route property \"${lazyRouteProperty}\" will be ignored.`\n    );\n\n    if (\n      !isPropertyStaticallyDefined &&\n      !immutableRouteKeys.has(lazyRouteProperty as ImmutableRouteKey)\n    ) {\n      routeUpdates[lazyRouteProperty] =\n        lazyRoute[lazyRouteProperty as keyof typeof lazyRoute];\n    }\n  }\n\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, {\n    // To keep things framework agnostic, we use the provided\n    // `mapRouteProperties` (or wrapped `detectErrorBoundary`) function to\n    // set the framework-aware properties (`element`/`hasErrorBoundary`) since\n    // the logic will differ between frameworks.\n    ...mapRouteProperties(routeToUpdate),\n    lazy: undefined,\n  });\n}\n\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  matches: AgnosticDataRouteMatch[],\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  basename: string,\n  opts: {\n    isStaticRequest?: boolean;\n    isRouteRequest?: boolean;\n    requestContext?: unknown;\n  } = {}\n): Promise<DataResult> {\n  let resultType;\n  let result;\n  let onReject: (() => void) | undefined;\n\n  let runHandler = (handler: ActionFunction | LoaderFunction) => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject: () => void;\n    let abortPromise = new Promise((_, r) => (reject = r));\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n    return Promise.race([\n      handler({\n        request,\n        params: match.params,\n        context: opts.requestContext,\n      }),\n      abortPromise,\n    ]);\n  };\n\n  try {\n    let handler = match.route[type];\n\n    if (match.route.lazy) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let values = await Promise.all([\n          runHandler(handler),\n          loadLazyRouteModule(match.route, mapRouteProperties, manifest),\n        ]);\n        result = values[0];\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadLazyRouteModule(match.route, mapRouteProperties, manifest);\n\n        handler = match.route[type];\n        if (handler) {\n          // Handler still run even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id,\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return { type: ResultType.data, data: undefined };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname,\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n\n    invariant(\n      result !== undefined,\n      `You defined ${type === \"action\" ? \"an action\" : \"a loader\"} for route ` +\n        `\"${match.route.id}\" but didn't return anything from your \\`${type}\\` ` +\n        `function. Please return a value or \\`null\\`.`\n    );\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n\n  if (isResponse(result)) {\n    let status = result.status;\n\n    // Process redirects\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(\n        location,\n        \"Redirects returned/thrown from loaders/actions must have a Location header\"\n      );\n\n      // Support relative routing in internal redirects\n      if (!ABSOLUTE_URL_REGEX.test(location)) {\n        location = normalizeTo(\n          new URL(request.url),\n          matches.slice(0, matches.indexOf(match) + 1),\n          basename,\n          true,\n          location\n        );\n      } else if (!opts.isStaticRequest) {\n        // Strip off the protocol+origin for same-origin + same-basename absolute\n        // redirects. If this is a static request, we can let it go back to the\n        // browser as-is\n        let currentUrl = new URL(request.url);\n        let url = location.startsWith(\"//\")\n          ? new URL(currentUrl.protocol + location)\n          : new URL(location);\n        let isSameBasename = stripBasename(url.pathname, basename) != null;\n        if (url.origin === currentUrl.origin && isSameBasename) {\n          location = url.pathname + url.search + url.hash;\n        }\n      }\n\n      // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n      if (opts.isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n      };\n    }\n\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n    if (opts.isRouteRequest) {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        type: resultType || ResultType.data,\n        response: result,\n      };\n    }\n\n    let data: any;\n    let contentType = result.headers.get(\"Content-Type\");\n    // Check between word boundaries instead of startsWith() due to the last\n    // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n    if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return { type: resultType, error: result };\n  }\n\n  if (isDeferredData(result)) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: result.init?.status,\n      headers: result.init?.headers && new Headers(result.init.headers),\n    };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(\n  history: History,\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let { formMethod, formEncType } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({ \"Content-Type\": formEncType });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (\n      formEncType === \"application/x-www-form-urlencoded\" &&\n      submission.formData\n    ) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n\n  return searchParams;\n}\n\nfunction convertSearchParamsToFormData(\n  searchParams: URLSearchParams\n): FormData {\n  let formData = new FormData();\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n  return formData;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = errors || {};\n\n      // Prefer higher error values if lower errors bubble to the same boundary\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      }\n\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      }\n\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (\n        result.statusCode != null &&\n        result.statusCode !== 200 &&\n        !foundError\n      ) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: DataResult[],\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    matchesToLoad,\n    results,\n    pendingError,\n    activeDeferreds\n  );\n\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let { key, match, controller } = revalidatingFetchers[index];\n    invariant(\n      fetcherResults !== undefined && fetcherResults[index] !== undefined,\n      \"Did not find corresponding fetcher result\"\n    );\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      continue;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match?.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[],\n  errors: RouteData | null | undefined\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      } else {\n        // No-op - this is so we ignore existing data if we have a key in the\n        // incoming object with an undefined value, which is how we unset a prior\n        // loaderData if we encounter a loader error\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n    id: `__shim-error-route__`,\n  };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n  };\n}\n\nfunction getInternalRouterError(\n  status: number,\n  {\n    pathname,\n    routeId,\n    method,\n    type,\n  }: {\n    pathname?: string;\n    routeId?: string;\n    method?: string;\n    type?: \"defer-action\" | \"invalid-body\";\n  } = {}\n) {\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method} request to \"${pathname}\" but ` +\n        `did not provide a \\`loader\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = `Route \"${routeId}\" does not match URL \"${pathname}\"`;\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = `No route matches URL \"${pathname}\"`;\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method.toUpperCase()} request to \"${pathname}\" but ` +\n        `did not provide an \\`action\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (method) {\n      errorMessage = `Invalid request method \"${method.toUpperCase()}\"`;\n    }\n  }\n\n  return new ErrorResponse(\n    status || 500,\n    statusText,\n    new Error(errorMessage),\n    true\n  );\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results: DataResult[]): RedirectResult | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nexport function isDeferredData(value: any): value is DeferredData {\n  let deferred: DeferredData = value;\n  return (\n    deferred &&\n    typeof deferred === \"object\" &&\n    typeof deferred.data === \"object\" &&\n    typeof deferred.subscribe === \"function\" &&\n    typeof deferred.cancel === \"function\" &&\n    typeof deferred.resolveData === \"function\"\n  );\n}\n\nfunction isResponse(value: any): value is Response {\n  return (\n    value != null &&\n    typeof value.status === \"number\" &&\n    typeof value.statusText === \"string\" &&\n    typeof value.headers === \"object\" &&\n    typeof value.body !== \"undefined\"\n  );\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj: any): obj is QueryRouteResponse {\n  return (\n    obj &&\n    isResponse(obj.response) &&\n    (obj.type === ResultType.data || ResultType.error)\n  );\n}\n\nfunction isValidMethod(method: string): method is FormMethod | V7_FormMethod {\n  return validRequestMethods.has(method.toLowerCase() as FormMethod);\n}\n\nfunction isMutationMethod(\n  method: string\n): method is MutationFormMethod | V7_MutationFormMethod {\n  return validMutationMethods.has(method.toLowerCase() as MutationFormMethod);\n}\n\nasync function resolveDeferredResults(\n  currentMatches: AgnosticDataRouteMatch[],\n  matchesToLoad: (AgnosticDataRouteMatch | null)[],\n  results: DataResult[],\n  signals: (AbortSignal | null)[],\n  isFetcher: boolean,\n  currentLoaderData?: RouteData\n) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match!.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      let signal = signals[index];\n      invariant(\n        signal,\n        \"Expected an AbortSignal for revalidating fetcher deferred result\"\n      );\n      await resolveDeferredData(result, signal, isFetcher).then((result) => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\n// Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\nfunction createUseMatchesMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UseMatchesMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id] as unknown,\n    handle: route.handle as unknown,\n  };\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n\nfunction getSubmissionFromNavigation(\n  navigation: Navigation\n): Submission | undefined {\n  let { formMethod, formAction, formEncType, text, formData, json } =\n    navigation;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text,\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined,\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined,\n    };\n  }\n}\n\nfunction getLoadingNavigation(\n  location: Location,\n  submission?: Submission\n): NavigationStates[\"Loading\"] {\n  if (submission) {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n    };\n    return navigation;\n  } else {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n    };\n    return navigation;\n  }\n}\n\nfunction getSubmittingNavigation(\n  location: Location,\n  submission: Submission\n): NavigationStates[\"Submitting\"] {\n  let navigation: NavigationStates[\"Submitting\"] = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n  };\n  return navigation;\n}\n\nfunction getLoadingFetcher(\n  submission?: Submission,\n  data?: Fetcher[\"data\"]\n): FetcherStates[\"Loading\"] {\n  if (submission) {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    return fetcher;\n  } else {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    return fetcher;\n  }\n}\n\nfunction getSubmittingFetcher(\n  submission: Submission,\n  existingFetcher?: Fetcher\n): FetcherStates[\"Submitting\"] {\n  let fetcher: FetcherStates[\"Submitting\"] = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined,\n    \" _hasFetcherDoneAnything \": true,\n  };\n  return fetcher;\n}\n\nfunction getDoneFetcher(data: Fetcher[\"data\"]): FetcherStates[\"Idle\"] {\n  let fetcher: FetcherStates[\"Idle\"] = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data,\n    \" _hasFetcherDoneAnything \": true,\n  };\n  return fetcher;\n}\n//#endregion\n"]},"metadata":{},"sourceType":"module"}